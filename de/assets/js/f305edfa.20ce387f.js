"use strict";(self.webpackChunkportal=self.webpackChunkportal||[]).push([[3183],{25587:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>h,contentTitle:()=>u,default:()=>m,frontMatter:()=>d,metadata:()=>r,toc:()=>p});const r=JSON.parse('{"id":"farming-&-staking/network/port-config/multi-network","title":"Multi-Network","description":"Port configuration for running multiple Autonomys networks simultaneously","source":"@site/i18n/de/docusaurus-plugin-content-docs/current/farming-&-staking/network/port-config/multi-network.mdx","sourceDirName":"farming-&-staking/network/port-config","slug":"/network/port-config/multi-network","permalink":"/de/network/port-config/multi-network","draft":false,"unlisted":false,"editUrl":"https://github.com/autonomys/subspace-docs/edit/main/docs/farming-&-staking/network/port-config/multi-network.mdx","tags":[],"version":"current","sidebarPosition":6,"frontMatter":{"title":"Multi-Network","sidebar_position":6,"description":"Port configuration for running multiple Autonomys networks simultaneously","slug":"/network/port-config/multi-network","keywords":["Multi-Network","Mainnet Testnet","Port Separation","Dual Network","Multiple Farmers"]},"sidebar":"tutorialSidebar","previous":{"title":"Timekeeper","permalink":"/de/network/port-config/timekeeper"},"next":{"title":"Public RPC Server","permalink":"/de/network/port-config/public-rpc"}}');var l=n(74848),s=n(28453),i=n(72206),o=n(82223),a=n(15912),c=n(76122);const d={title:"Multi-Network",sidebar_position:6,description:"Port configuration for running multiple Autonomys networks simultaneously",slug:"/network/port-config/multi-network",keywords:["Multi-Network","Mainnet Testnet","Port Separation","Dual Network","Multiple Farmers"]},u="Multi-Network",h={},p=[{value:"Network Architecture",id:"network-architecture",level:2},{value:"Required Ports",id:"required-ports",level:2},{value:"Basic Node + Farmer Setup",id:"basic-node--farmer-setup",level:3},{value:"Domain Operator Setup (Additional Ports)",id:"domain-operator-setup-additional-ports",level:3},{value:"Complete Setup Guide",id:"complete-setup-guide",level:2},{value:"Step 1: Router Port Forwarding",id:"step-1-router-port-forwarding",level:3},{value:"Step 2: Firewall Configuration",id:"step-2-firewall-configuration",level:3},{value:"Multi-Network Configurations",id:"multi-network-configurations",level:2},{value:"Mainnet + Testnet Simultaneously",id:"mainnet--testnet-simultaneously",level:3},{value:"Verification",id:"verification",level:2},{value:"Check Port Usage",id:"check-port-usage",level:3},{value:"Test Connectivity",id:"test-connectivity",level:3},{value:"Common Issues",id:"common-issues",level:2},{value:"Port Conflicts",id:"port-conflicts",level:3},{value:"Data Directory Separation",id:"data-directory-separation",level:3},{value:"Best Practices",id:"best-practices",level:2}];function x(e){const t={admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",mermaid:"mermaid",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,s.R)(),...e.components};return(0,l.jsxs)(l.Fragment,{children:[(0,l.jsx)(t.header,{children:(0,l.jsx)(t.h1,{id:"multi-network",children:"Multi-Network"})}),"\n",(0,l.jsx)(t.p,{children:"Running multiple Autonomys networks or configurations on the same machine requires careful port separation to avoid conflicts."}),"\n",(0,l.jsx)(t.h2,{id:"network-architecture",children:"Network Architecture"}),"\n",(0,l.jsx)(t.p,{children:(0,l.jsx)(t.strong,{children:"Mainnet Setup:"})}),"\n",(0,l.jsx)(t.mermaid,{value:'graph LR\n    subgraph "Your Setup"\n        MainNode("Mainnet Node<br/>30333, 30433")\n        MainFarmer("Mainnet Farmer<br/>30533")\n        MainNode <--\x3e|"RPC 9944"| MainFarmer\n    end\n\n    subgraph "Autonomys Mainnet"\n        MainNet([Mainnet Peers])\n        MainDSN([Mainnet DSN])\n        MainFarmers([Other Farmers])\n    end\n\n    MainNode <--\x3e|"Consensus: 30333"| MainNet\n    MainNode <--\x3e|"DSN: 30433"| MainDSN\n    MainFarmer <--\x3e|"Farming: 30533"| MainFarmers'}),"\n",(0,l.jsx)(t.p,{children:(0,l.jsx)(t.strong,{children:"Testnet Setup:"})}),"\n",(0,l.jsx)(t.mermaid,{value:'graph LR\n    subgraph "Your Setup"\n        TestNode("Testnet Node<br/>31333, 31433")\n        TestFarmer("Testnet Farmer<br/>31533")\n        TestNode <--\x3e|"RPC 9955"| TestFarmer\n    end\n\n    subgraph "Autonomys Testnet"\n        TestNet([Testnet Peers])\n        TestDSN([Testnet DSN])\n        TestFarmers([Other Farmers])\n    end\n\n    TestNode <--\x3e|"Consensus: 31333"| TestNet\n    TestNode <--\x3e|"DSN: 31433"| TestDSN\n    TestFarmer <--\x3e|"Farming: 31533"| TestFarmers'}),"\n",(0,l.jsx)(t.h2,{id:"required-ports",children:"Required Ports"}),"\n",(0,l.jsx)(t.h3,{id:"basic-node--farmer-setup",children:"Basic Node + Farmer Setup"}),"\n",(0,l.jsxs)(t.table,{children:[(0,l.jsx)(t.thead,{children:(0,l.jsxs)(t.tr,{children:[(0,l.jsx)(t.th,{style:{textAlign:"left"},children:"Network"}),(0,l.jsx)(t.th,{style:{textAlign:"left"},children:"Consensus"}),(0,l.jsx)(t.th,{style:{textAlign:"left"},children:"DSN"}),(0,l.jsx)(t.th,{style:{textAlign:"left"},children:"Farmer"}),(0,l.jsx)(t.th,{style:{textAlign:"left"},children:"RPC"})]})}),(0,l.jsxs)(t.tbody,{children:[(0,l.jsxs)(t.tr,{children:[(0,l.jsx)(t.td,{style:{textAlign:"left"},children:(0,l.jsx)(t.strong,{children:"Mainnet"})}),(0,l.jsx)(t.td,{style:{textAlign:"left"},children:"30333"}),(0,l.jsx)(t.td,{style:{textAlign:"left"},children:"30433"}),(0,l.jsx)(t.td,{style:{textAlign:"left"},children:"30533"}),(0,l.jsx)(t.td,{style:{textAlign:"left"},children:"9944"})]}),(0,l.jsxs)(t.tr,{children:[(0,l.jsx)(t.td,{style:{textAlign:"left"},children:(0,l.jsx)(t.strong,{children:"Testnet"})}),(0,l.jsx)(t.td,{style:{textAlign:"left"},children:"31333"}),(0,l.jsx)(t.td,{style:{textAlign:"left"},children:"31433"}),(0,l.jsx)(t.td,{style:{textAlign:"left"},children:"31533"}),(0,l.jsx)(t.td,{style:{textAlign:"left"},children:"9955"})]})]})]}),"\n",(0,l.jsx)(t.h3,{id:"domain-operator-setup-additional-ports",children:"Domain Operator Setup (Additional Ports)"}),"\n",(0,l.jsxs)(t.table,{children:[(0,l.jsx)(t.thead,{children:(0,l.jsxs)(t.tr,{children:[(0,l.jsx)(t.th,{style:{textAlign:"left"},children:"Network"}),(0,l.jsx)(t.th,{style:{textAlign:"left"},children:"Domain P2P"}),(0,l.jsx)(t.th,{style:{textAlign:"left"},children:"Operator"}),(0,l.jsx)(t.th,{style:{textAlign:"left"},children:"Domain RPC"})]})}),(0,l.jsxs)(t.tbody,{children:[(0,l.jsxs)(t.tr,{children:[(0,l.jsx)(t.td,{style:{textAlign:"left"},children:(0,l.jsx)(t.strong,{children:"Mainnet"})}),(0,l.jsx)(t.td,{style:{textAlign:"left"},children:"30334"}),(0,l.jsx)(t.td,{style:{textAlign:"left"},children:"40333"}),(0,l.jsx)(t.td,{style:{textAlign:"left"},children:"9945"})]}),(0,l.jsxs)(t.tr,{children:[(0,l.jsx)(t.td,{style:{textAlign:"left"},children:(0,l.jsx)(t.strong,{children:"Testnet"})}),(0,l.jsx)(t.td,{style:{textAlign:"left"},children:"31334"}),(0,l.jsx)(t.td,{style:{textAlign:"left"},children:"41333"}),(0,l.jsx)(t.td,{style:{textAlign:"left"},children:"9956"})]})]})]}),"\n",(0,l.jsxs)(t.admonition,{title:"Separate RPC Ports Required",type:"caution",children:[(0,l.jsxs)(t.ul,{children:["\n",(0,l.jsxs)(t.li,{children:[(0,l.jsx)(t.strong,{children:"Mainnet"}),": 9944 (consensus), 9945 (domain)"]}),"\n",(0,l.jsxs)(t.li,{children:[(0,l.jsx)(t.strong,{children:"Testnet"}),": 9955 (consensus), 9956 (domain)"]}),"\n"]}),(0,l.jsx)(t.p,{children:"Never use the same RPC port for multiple networks running simultaneously."})]}),"\n",(0,l.jsx)(t.h2,{id:"complete-setup-guide",children:"Complete Setup Guide"}),"\n",(0,l.jsx)(t.h3,{id:"step-1-router-port-forwarding",children:"Step 1: Router Port Forwarding"}),"\n",(0,l.jsx)(t.p,{children:"Configure these port forwarding rules for each network:"}),"\n",(0,l.jsx)(t.p,{children:(0,l.jsx)(t.strong,{children:"Mainnet Port Forwarding:"})}),"\n",(0,l.jsxs)(t.table,{children:[(0,l.jsx)(t.thead,{children:(0,l.jsxs)(t.tr,{children:[(0,l.jsx)(t.th,{style:{textAlign:"left"},children:"Service Name"}),(0,l.jsx)(t.th,{style:{textAlign:"left"},children:"External Port"}),(0,l.jsx)(t.th,{style:{textAlign:"left"},children:"Internal IP"}),(0,l.jsx)(t.th,{style:{textAlign:"left"},children:"Internal Port"}),(0,l.jsx)(t.th,{style:{textAlign:"left"},children:"Protocol"})]})}),(0,l.jsxs)(t.tbody,{children:[(0,l.jsxs)(t.tr,{children:[(0,l.jsx)(t.td,{style:{textAlign:"left"},children:"Mainnet-Consensus"}),(0,l.jsx)(t.td,{style:{textAlign:"left"},children:"30333"}),(0,l.jsx)(t.td,{style:{textAlign:"left"},children:"Your IP"}),(0,l.jsx)(t.td,{style:{textAlign:"left"},children:"30333"}),(0,l.jsx)(t.td,{style:{textAlign:"left"},children:"TCP"})]}),(0,l.jsxs)(t.tr,{children:[(0,l.jsx)(t.td,{style:{textAlign:"left"},children:"Mainnet-DSN"}),(0,l.jsx)(t.td,{style:{textAlign:"left"},children:"30433"}),(0,l.jsx)(t.td,{style:{textAlign:"left"},children:"Your IP"}),(0,l.jsx)(t.td,{style:{textAlign:"left"},children:"30433"}),(0,l.jsx)(t.td,{style:{textAlign:"left"},children:"TCP"})]}),(0,l.jsxs)(t.tr,{children:[(0,l.jsx)(t.td,{style:{textAlign:"left"},children:"Mainnet-Farmer"}),(0,l.jsx)(t.td,{style:{textAlign:"left"},children:"30533"}),(0,l.jsx)(t.td,{style:{textAlign:"left"},children:"Your IP"}),(0,l.jsx)(t.td,{style:{textAlign:"left"},children:"30533"}),(0,l.jsx)(t.td,{style:{textAlign:"left"},children:"TCP"})]}),(0,l.jsxs)(t.tr,{children:[(0,l.jsx)(t.td,{style:{textAlign:"left"},children:"Mainnet-Domain-P2P"}),(0,l.jsx)(t.td,{style:{textAlign:"left"},children:"30334"}),(0,l.jsx)(t.td,{style:{textAlign:"left"},children:"Your IP"}),(0,l.jsx)(t.td,{style:{textAlign:"left"},children:"30334"}),(0,l.jsx)(t.td,{style:{textAlign:"left"},children:"TCP"})]}),(0,l.jsxs)(t.tr,{children:[(0,l.jsx)(t.td,{style:{textAlign:"left"},children:"Mainnet-Domain-Operator"}),(0,l.jsx)(t.td,{style:{textAlign:"left"},children:"40333"}),(0,l.jsx)(t.td,{style:{textAlign:"left"},children:"Your IP"}),(0,l.jsx)(t.td,{style:{textAlign:"left"},children:"40333"}),(0,l.jsx)(t.td,{style:{textAlign:"left"},children:"TCP"})]})]})]}),"\n",(0,l.jsx)(t.p,{children:(0,l.jsx)(t.strong,{children:"Testnet Port Forwarding:"})}),"\n",(0,l.jsxs)(t.table,{children:[(0,l.jsx)(t.thead,{children:(0,l.jsxs)(t.tr,{children:[(0,l.jsx)(t.th,{style:{textAlign:"left"},children:"Service Name"}),(0,l.jsx)(t.th,{style:{textAlign:"left"},children:"External Port"}),(0,l.jsx)(t.th,{style:{textAlign:"left"},children:"Internal IP"}),(0,l.jsx)(t.th,{style:{textAlign:"left"},children:"Internal Port"}),(0,l.jsx)(t.th,{style:{textAlign:"left"},children:"Protocol"})]})}),(0,l.jsxs)(t.tbody,{children:[(0,l.jsxs)(t.tr,{children:[(0,l.jsx)(t.td,{style:{textAlign:"left"},children:"Testnet-Consensus"}),(0,l.jsx)(t.td,{style:{textAlign:"left"},children:"31333"}),(0,l.jsx)(t.td,{style:{textAlign:"left"},children:"Your IP"}),(0,l.jsx)(t.td,{style:{textAlign:"left"},children:"31333"}),(0,l.jsx)(t.td,{style:{textAlign:"left"},children:"TCP"})]}),(0,l.jsxs)(t.tr,{children:[(0,l.jsx)(t.td,{style:{textAlign:"left"},children:"Testnet-DSN"}),(0,l.jsx)(t.td,{style:{textAlign:"left"},children:"31433"}),(0,l.jsx)(t.td,{style:{textAlign:"left"},children:"Your IP"}),(0,l.jsx)(t.td,{style:{textAlign:"left"},children:"31433"}),(0,l.jsx)(t.td,{style:{textAlign:"left"},children:"TCP"})]}),(0,l.jsxs)(t.tr,{children:[(0,l.jsx)(t.td,{style:{textAlign:"left"},children:"Testnet-Farmer"}),(0,l.jsx)(t.td,{style:{textAlign:"left"},children:"31533"}),(0,l.jsx)(t.td,{style:{textAlign:"left"},children:"Your IP"}),(0,l.jsx)(t.td,{style:{textAlign:"left"},children:"31533"}),(0,l.jsx)(t.td,{style:{textAlign:"left"},children:"TCP"})]}),(0,l.jsxs)(t.tr,{children:[(0,l.jsx)(t.td,{style:{textAlign:"left"},children:"Testnet-Domain-P2P"}),(0,l.jsx)(t.td,{style:{textAlign:"left"},children:"31334"}),(0,l.jsx)(t.td,{style:{textAlign:"left"},children:"Your IP"}),(0,l.jsx)(t.td,{style:{textAlign:"left"},children:"31334"}),(0,l.jsx)(t.td,{style:{textAlign:"left"},children:"TCP"})]}),(0,l.jsxs)(t.tr,{children:[(0,l.jsx)(t.td,{style:{textAlign:"left"},children:"Testnet-Domain-Operator"}),(0,l.jsx)(t.td,{style:{textAlign:"left"},children:"41333"}),(0,l.jsx)(t.td,{style:{textAlign:"left"},children:"Your IP"}),(0,l.jsx)(t.td,{style:{textAlign:"left"},children:"41333"}),(0,l.jsx)(t.td,{style:{textAlign:"left"},children:"TCP"})]})]})]}),"\n",(0,l.jsx)(t.admonition,{title:"Domain Operator Ports",type:"note",children:(0,l.jsx)(t.p,{children:"The domain operator ports (30334/31334 and 40333/41333) are only needed if you're running domain operators on both networks. Skip these if you're only running basic node + farmer setups."})}),"\n",(0,l.jsx)(t.h3,{id:"step-2-firewall-configuration",children:"Step 2: Firewall Configuration"}),"\n",(0,l.jsxs)(i.A,{children:[(0,l.jsx)(o.A,{value:"linux",label:"Linux",children:(0,l.jsx)(t.pre,{children:(0,l.jsx)(t.code,{className:"language-bash",children:"# Enable firewall\nsudo ufw enable\n\n# Mainnet ports\nsudo ufw allow 30333/tcp comment 'Mainnet Consensus'\nsudo ufw allow 30433/tcp comment 'Mainnet DSN'\nsudo ufw allow 30533/tcp comment 'Mainnet Farmer'\n\n# Mainnet domain operator ports (if needed)\nsudo ufw allow 30334/tcp comment 'Mainnet Domain P2P'\nsudo ufw allow 40333/tcp comment 'Mainnet Domain Operator'\n\n# Testnet ports\nsudo ufw allow 31333/tcp comment 'Testnet Consensus'\nsudo ufw allow 31433/tcp comment 'Testnet DSN'\nsudo ufw allow 31533/tcp comment 'Testnet Farmer'\n\n# Testnet domain operator ports (if needed)\nsudo ufw allow 31334/tcp comment 'Testnet Domain P2P'\nsudo ufw allow 41333/tcp comment 'Testnet Domain Operator'\n\n# RPC ports - local only\nsudo ufw allow from 127.0.0.1 to any port 9944 proto tcp comment 'Mainnet Consensus RPC'\nsudo ufw allow from 127.0.0.1 to any port 9945 proto tcp comment 'Mainnet Domain RPC'\nsudo ufw allow from 127.0.0.1 to any port 9955 proto tcp comment 'Testnet Consensus RPC'\nsudo ufw allow from 127.0.0.1 to any port 9956 proto tcp comment 'Testnet Domain RPC'\n\n# Verify configuration\nsudo ufw status numbered\n"})})}),(0,l.jsx)(o.A,{value:"windows",label:"Windows",children:(0,l.jsx)(t.pre,{children:(0,l.jsx)(t.code,{className:"language-powershell",children:'# Mainnet ports\nNew-NetFirewallRule -DisplayName "Mainnet Consensus" `\n    -Direction Inbound -Protocol TCP -LocalPort 30333 -Action Allow\n\nNew-NetFirewallRule -DisplayName "Mainnet DSN" `\n    -Direction Inbound -Protocol TCP -LocalPort 30433 -Action Allow\n\nNew-NetFirewallRule -DisplayName "Mainnet Farmer" `\n    -Direction Inbound -Protocol TCP -LocalPort 30533 -Action Allow\n\n# Mainnet domain operator ports (if needed)\nNew-NetFirewallRule -DisplayName "Mainnet Domain P2P" `\n    -Direction Inbound -Protocol TCP -LocalPort 30334 -Action Allow\n\nNew-NetFirewallRule -DisplayName "Mainnet Domain Operator" `\n    -Direction Inbound -Protocol TCP -LocalPort 40333 -Action Allow\n\n# Testnet ports\nNew-NetFirewallRule -DisplayName "Testnet Consensus" `\n    -Direction Inbound -Protocol TCP -LocalPort 31333 -Action Allow\n\nNew-NetFirewallRule -DisplayName "Testnet DSN" `\n    -Direction Inbound -Protocol TCP -LocalPort 31433 -Action Allow\n\nNew-NetFirewallRule -DisplayName "Testnet Farmer" `\n    -Direction Inbound -Protocol TCP -LocalPort 31533 -Action Allow\n\n# Testnet domain operator ports (if needed)\nNew-NetFirewallRule -DisplayName "Testnet Domain P2P" `\n    -Direction Inbound -Protocol TCP -LocalPort 31334 -Action Allow\n\nNew-NetFirewallRule -DisplayName "Testnet Domain Operator" `\n    -Direction Inbound -Protocol TCP -LocalPort 41333 -Action Allow\n\n# RPC ports - local only\nNew-NetFirewallRule -DisplayName "Mainnet Consensus RPC" `\n    -Direction Inbound -Protocol TCP -LocalPort 9944 `\n    -RemoteAddress @("127.0.0.1", "::1") -Action Allow\n\nNew-NetFirewallRule -DisplayName "Mainnet Domain RPC" `\n    -Direction Inbound -Protocol TCP -LocalPort 9945 `\n    -RemoteAddress @("127.0.0.1", "::1") -Action Allow\n\nNew-NetFirewallRule -DisplayName "Testnet Consensus RPC" `\n    -Direction Inbound -Protocol TCP -LocalPort 9955 `\n    -RemoteAddress @("127.0.0.1", "::1") -Action Allow\n\nNew-NetFirewallRule -DisplayName "Testnet Domain RPC" `\n    -Direction Inbound -Protocol TCP -LocalPort 9956 `\n    -RemoteAddress @("127.0.0.1", "::1") -Action Allow\n\n# Verify\nGet-NetFirewallRule -DisplayName "*net*" | Format-Table DisplayName, Enabled, Action\n'})})})]}),"\n",(0,l.jsx)(t.h2,{id:"multi-network-configurations",children:"Multi-Network Configurations"}),"\n",(0,l.jsx)(t.h3,{id:"mainnet--testnet-simultaneously",children:"Mainnet + Testnet Simultaneously"}),"\n",(0,l.jsx)(t.p,{children:"Running both networks on the same machine:"}),"\n",(0,l.jsxs)(i.A,{children:[(0,l.jsx)(o.A,{value:"separate-instances",label:"Separate Instances",children:(0,l.jsx)(t.pre,{children:(0,l.jsx)(t.code,{className:"language-bash",children:"# Mainnet Configuration\n./subspace-node run \\\n  --chain mainnet \\\n  --base-path /var/lib/autonomys/mainnet \\\n  --listen-on /ip4/0.0.0.0/tcp/30333 \\\n  --dsn-listen-on /ip4/0.0.0.0/tcp/30433 \\\n  --rpc-listen-on 127.0.0.1:9944\n\n# Testnet Configuration (separate terminal)\n./subspace-node run \\\n  --chain chronos \\\n  --base-path /var/lib/autonomys/testnet \\\n  --listen-on /ip4/0.0.0.0/tcp/31333 \\\n  --dsn-listen-on /ip4/0.0.0.0/tcp/31433 \\\n  --rpc-listen-on 127.0.0.1:9955\n\n# Mainnet Farmer (separate terminal)\n./subspace-farmer farm \\\n  --node-rpc-url ws://127.0.0.1:9944 \\\n  --listen-on /ip4/0.0.0.0/tcp/30533 \\\n  path=/farms/mainnet,size=100GiB\n\n# Testnet Farmer (separate terminal)\n./subspace-farmer farm \\\n  --node-rpc-url ws://127.0.0.1:9955 \\\n  --listen-on /ip4/0.0.0.0/tcp/31533 \\\n  path=/farms/testnet,size=50GiB\n"})})}),(0,l.jsx)(o.A,{value:"systemd",label:"Systemd Services",children:(0,l.jsx)(t.pre,{children:(0,l.jsx)(t.code,{className:"language-bash",children:"# Mainnet Node Service\nsudo tee /etc/systemd/system/mainnet-node.service << EOF\n[Unit]\nDescription=Autonomys Mainnet Node\nAfter=network.target\n\n[Service]\nType=simple\nUser=autonomys\nExecStart=/usr/local/bin/subspace-node run \\\\\n  --chain mainnet \\\\\n  --base-path /var/lib/autonomys/mainnet \\\\\n  --listen-on /ip4/0.0.0.0/tcp/30333 \\\\\n  --dsn-listen-on /ip4/0.0.0.0/tcp/30433 \\\\\n  --rpc-listen-on 127.0.0.1:9944\nRestart=on-failure\n\n[Install]\nWantedBy=multi-user.target\nEOF\n\n# Testnet Node Service\nsudo tee /etc/systemd/system/testnet-node.service << EOF\n[Unit]\nDescription=Autonomys Testnet Node\nAfter=network.target\n\n[Service]\nType=simple\nUser=autonomys\nExecStart=/usr/local/bin/subspace-node run \\\\\n  --chain chronos \\\\\n  --base-path /var/lib/autonomys/testnet \\\\\n  --listen-on /ip4/0.0.0.0/tcp/31333 \\\\\n  --dsn-listen-on /ip4/0.0.0.0/tcp/31433 \\\\\n  --rpc-listen-on 127.0.0.1:9955\nRestart=on-failure\n\n[Install]\nWantedBy=multi-user.target\nEOF\n\n# Enable and start services\nsudo systemctl daemon-reload\nsudo systemctl enable --now mainnet-node testnet-node\n"})})})]}),"\n",(0,l.jsx)(t.h2,{id:"verification",children:"Verification"}),"\n",(0,l.jsx)(t.h3,{id:"check-port-usage",children:"Check Port Usage"}),"\n",(0,l.jsx)(t.pre,{children:(0,l.jsx)(t.code,{className:"language-bash",children:'# Check all Autonomys ports are listening\nsudo netstat -tuln | grep -E "30333|31333|30433|31433|30533|31533|30334|31334|40333|41333|9944|9945|9955|9956"\n\n# Expected output shows both networks:\n# tcp  0  0  0.0.0.0:30333  LISTEN  # Mainnet Consensus\n# tcp  0  0  0.0.0.0:31333  LISTEN  # Testnet Consensus\n# tcp  0  0  0.0.0.0:30433  LISTEN  # Mainnet DSN\n# tcp  0  0  0.0.0.0:31433  LISTEN  # Testnet DSN\n# tcp  0  0  0.0.0.0:30533  LISTEN  # Mainnet Farmer\n# tcp  0  0  0.0.0.0:31533  LISTEN  # Testnet Farmer\n# tcp  0  0  0.0.0.0:30334  LISTEN  # Mainnet Domain P2P (if running)\n# tcp  0  0  0.0.0.0:31334  LISTEN  # Testnet Domain P2P (if running)\n# tcp  0  0  0.0.0.0:40333  LISTEN  # Mainnet Domain Operator (if running)\n# tcp  0  0  0.0.0.0:41333  LISTEN  # Testnet Domain Operator (if running)\n# tcp  0  0  127.0.0.1:9944 LISTEN  # Mainnet Consensus RPC\n# tcp  0  0  127.0.0.1:9945 LISTEN  # Mainnet Domain RPC (if running)\n# tcp  0  0  127.0.0.1:9955 LISTEN  # Testnet Consensus RPC\n# tcp  0  0  127.0.0.1:9956 LISTEN  # Testnet Domain RPC (if running)\n'})}),"\n",(0,l.jsx)(t.h3,{id:"test-connectivity",children:"Test Connectivity"}),"\n",(0,l.jsx)(t.pre,{children:(0,l.jsx)(t.code,{className:"language-bash",children:"# Test mainnet connectivity\nnc -zv localhost 30333\ncurl -s http://127.0.0.1:9944\n\n# Test testnet connectivity\nnc -zv localhost 31333\ncurl -s http://127.0.0.1:9955\n\n# External connectivity test\nnc -zv YOUR_PUBLIC_IP 30333\nnc -zv YOUR_PUBLIC_IP 31333\n"})}),"\n",(0,l.jsx)(t.h2,{id:"common-issues",children:"Common Issues"}),"\n",(0,l.jsx)(t.h3,{id:"port-conflicts",children:"Port Conflicts"}),"\n",(0,l.jsxs)(t.p,{children:[(0,l.jsx)(t.strong,{children:"Error:"}),' "Address already in use"']}),"\n",(0,l.jsx)(t.p,{children:(0,l.jsx)(t.strong,{children:"Solution:"})}),"\n",(0,l.jsx)(t.pre,{children:(0,l.jsx)(t.code,{className:"language-bash",children:"# Find what's using the port\nsudo lsof -i :30333\n\n# Kill conflicting process or use different ports\n./subspace-node --listen-on /ip4/0.0.0.0/tcp/32333\n"})}),"\n",(0,l.jsx)(t.h3,{id:"data-directory-separation",children:"Data Directory Separation"}),"\n",(0,l.jsxs)(t.p,{children:[(0,l.jsx)(t.strong,{children:"Critical:"})," Always use separate data directories:"]}),"\n",(0,l.jsx)(t.pre,{children:(0,l.jsx)(t.code,{className:"language-bash",children:"# Correct - separate directories\n--base-path /var/lib/autonomys/mainnet\n--base-path /var/lib/autonomys/testnet\n\n# Wrong - same directory causes corruption\n--base-path /var/lib/autonomys  # DON'T DO THIS\n"})}),"\n",(0,l.jsx)(t.h2,{id:"best-practices",children:"Best Practices"}),"\n",(0,l.jsxs)(t.p,{children:[(0,l.jsx)(a.A,{icon:c.Ze.CHECK_CIRCLE})," ",(0,l.jsx)(t.strong,{children:"DO:"})]}),"\n",(0,l.jsxs)(t.ul,{children:["\n",(0,l.jsx)(t.li,{children:"Use separate base paths for each network"}),"\n",(0,l.jsx)(t.li,{children:"Document your port assignments"}),"\n",(0,l.jsx)(t.li,{children:"Monitor resource usage closely"}),"\n",(0,l.jsx)(t.li,{children:"Test each network independently first"}),"\n",(0,l.jsx)(t.li,{children:"Use systemd services for production"}),"\n"]}),"\n",(0,l.jsxs)(t.p,{children:[(0,l.jsx)(a.A,{icon:c.Ze.CLOSE_CIRCLE})," ",(0,l.jsx)(t.strong,{children:"DON'T:"})]}),"\n",(0,l.jsxs)(t.ul,{children:["\n",(0,l.jsx)(t.li,{children:"Share data directories between networks"}),"\n",(0,l.jsx)(t.li,{children:"Run more instances than your hardware can handle"}),"\n",(0,l.jsx)(t.li,{children:"Expose RPC ports to the internet"}),"\n",(0,l.jsx)(t.li,{children:"Use overlapping port ranges"}),"\n",(0,l.jsx)(t.li,{children:"Forget to update firewall rules"}),"\n"]})]})}function m(e={}){const{wrapper:t}={...(0,s.R)(),...e.components};return t?(0,l.jsx)(t,{...e,children:(0,l.jsx)(x,{...e})}):x(e)}},28453:(e,t,n)=>{n.d(t,{R:()=>i,x:()=>o});var r=n(96540);const l={},s=r.createContext(l);function i(e){const t=r.useContext(s);return r.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function o(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(l):e.components||l:i(e.components),r.createElement(s.Provider,{value:t},e.children)}},72206:(e,t,n)=>{n.d(t,{A:()=>b});var r=n(96540),l=n(18215),s=n(80052),i=n(56347),o=n(35793),a=n(99025),c=n(4430),d=n(44148);function u(e){return r.Children.toArray(e).filter((e=>"\n"!==e)).map((e=>{if(!e||(0,r.isValidElement)(e)&&function(e){const{props:t}=e;return!!t&&"object"==typeof t&&"value"in t}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}function h(e){const{values:t,children:n}=e;return(0,r.useMemo)((()=>{const e=t??function(e){return u(e).map((e=>{let{props:{value:t,label:n,attributes:r,default:l}}=e;return{value:t,label:n,attributes:r,default:l}}))}(n);return function(e){const t=(0,c.XI)(e,((e,t)=>e.value===t.value));if(t.length>0)throw new Error(`Docusaurus error: Duplicate values "${t.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[t,n])}function p(e){let{value:t,tabValues:n}=e;return n.some((e=>e.value===t))}function x(e){let{queryString:t=!1,groupId:n}=e;const l=(0,i.W6)(),s=function(e){let{queryString:t=!1,groupId:n}=e;if("string"==typeof t)return t;if(!1===t)return null;if(!0===t&&!n)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return n??null}({queryString:t,groupId:n});return[(0,a.aZ)(s),(0,r.useCallback)((e=>{if(!s)return;const t=new URLSearchParams(l.location.search);t.set(s,e),l.replace({...l.location,search:t.toString()})}),[s,l])]}function m(e){const{defaultValue:t,queryString:n=!1,groupId:l}=e,s=h(e),[i,a]=(0,r.useState)((()=>function(e){let{defaultValue:t,tabValues:n}=e;if(0===n.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(t){if(!p({value:t,tabValues:n}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${t}" but none of its children has the corresponding value. Available values are: ${n.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return t}const r=n.find((e=>e.default))??n[0];if(!r)throw new Error("Unexpected error: 0 tabValues");return r.value}({defaultValue:t,tabValues:s}))),[c,u]=x({queryString:n,groupId:l}),[m,f]=function(e){let{groupId:t}=e;const n=function(e){return e?`docusaurus.tab.${e}`:null}(t),[l,s]=(0,d.Dv)(n);return[l,(0,r.useCallback)((e=>{n&&s.set(e)}),[n,s])]}({groupId:l}),g=(()=>{const e=c??m;return p({value:e,tabValues:s})?e:null})();(0,o.A)((()=>{g&&a(g)}),[g]);return{selectedValue:i,selectValue:(0,r.useCallback)((e=>{if(!p({value:e,tabValues:s}))throw new Error(`Can't select invalid tab value=${e}`);a(e),u(e),f(e)}),[u,f,s]),tabValues:s}}var f=n(75251);const g={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};var j=n(74848);function y(e){let{className:t,block:n,selectedValue:r,selectValue:i,tabValues:o}=e;const a=[],{blockElementScrollPositionUntilNextRender:c}=(0,s.a_)(),d=e=>{const t=e.currentTarget,n=a.indexOf(t),l=o[n].value;l!==r&&(c(t),i(l))},u=e=>{let t=null;switch(e.key){case"Enter":d(e);break;case"ArrowRight":{const n=a.indexOf(e.currentTarget)+1;t=a[n]??a[0];break}case"ArrowLeft":{const n=a.indexOf(e.currentTarget)-1;t=a[n]??a[a.length-1];break}}t?.focus()};return(0,j.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,l.A)("tabs",{"tabs--block":n},t),children:o.map((e=>{let{value:t,label:n,attributes:s}=e;return(0,j.jsx)("li",{role:"tab",tabIndex:r===t?0:-1,"aria-selected":r===t,ref:e=>{a.push(e)},onKeyDown:u,onClick:d,...s,className:(0,l.A)("tabs__item",g.tabItem,s?.className,{"tabs__item--active":r===t}),children:n??t},t)}))})}function w(e){let{lazy:t,children:n,selectedValue:s}=e;const i=(Array.isArray(n)?n:[n]).filter(Boolean);if(t){const e=i.find((e=>e.props.value===s));return e?(0,r.cloneElement)(e,{className:(0,l.A)("margin-top--md",e.props.className)}):null}return(0,j.jsx)("div",{className:"margin-top--md",children:i.map(((e,t)=>(0,r.cloneElement)(e,{key:t,hidden:e.props.value!==s})))})}function A(e){const t=m(e);return(0,j.jsxs)("div",{className:(0,l.A)("tabs-container",g.tabList),children:[(0,j.jsx)(y,{...t,...e}),(0,j.jsx)(w,{...t,...e})]})}function b(e){const t=(0,f.A)();return(0,j.jsx)(A,{...e,children:u(e.children)},String(t))}},82223:(e,t,n)=>{n.d(t,{A:()=>i});n(96540);var r=n(18215);const l={tabItem:"tabItem_Ymn6"};var s=n(74848);function i(e){let{children:t,hidden:n,className:i}=e;return(0,s.jsx)("div",{role:"tabpanel",className:(0,r.A)(l.tabItem,i),hidden:n,children:t})}}}]);