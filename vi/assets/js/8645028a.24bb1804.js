"use strict";(self.webpackChunkportal=self.webpackChunkportal||[]).push([[9427],{28453:(e,n,l)=>{l.d(n,{R:()=>t,x:()=>o});var s=l(96540);const i={},r=s.createContext(i);function t(e){const n=s.useContext(r);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:t(e.components),s.createElement(r.Provider,{value:n},e.children)}},61744:(e,n,l)=>{l.r(n),l.d(n,{assets:()=>p,contentTitle:()=>u,default:()=>m,frontMatter:()=>d,metadata:()=>s,toc:()=>h});const s=JSON.parse('{"id":"farming-&-staking/network/firewall/os","title":"Operating System Firewalls","description":"Configure Windows, Linux, and macOS firewalls for Autonomys Network","source":"@site/i18n/vi/docusaurus-plugin-content-docs/current/farming-&-staking/network/firewall/os.mdx","sourceDirName":"farming-&-staking/network/firewall","slug":"/network/firewall/os","permalink":"/vi/network/firewall/os","draft":false,"unlisted":false,"editUrl":"https://github.com/autonomys/subspace-docs/edit/main/docs/farming-&-staking/network/firewall/os.mdx","tags":[],"version":"current","sidebarPosition":2,"frontMatter":{"title":"Operating System Firewalls","sidebar_position":2,"description":"Configure Windows, Linux, and macOS firewalls for Autonomys Network","slug":"/network/firewall/os","keywords":["Windows Firewall","UFW","iptables","macOS Firewall","Firewall Rules"]},"sidebar":"tutorialSidebar","previous":{"title":"Router Configuration","permalink":"/vi/network/firewall/router-config"},"next":{"title":"Port Configuration","permalink":"/vi/category/port-config"}}');var i=l(74848),r=l(28453),t=l(72206),o=l(82223),a=l(15912),c=l(76122);const d={title:"Operating System Firewalls",sidebar_position:2,description:"Configure Windows, Linux, and macOS firewalls for Autonomys Network",slug:"/network/firewall/os",keywords:["Windows Firewall","UFW","iptables","macOS Firewall","Firewall Rules"]},u="Operating System Firewalls",p={},h=[{value:"Quick Setup by OS",id:"quick-setup-by-os",level:2},{value:"Windows Firewall Configuration",id:"windows-firewall-configuration",level:2},{value:"Method 1: PowerShell (Recommended)",id:"method-1-powershell-recommended",level:3},{value:"Method 2: Windows Defender Firewall GUI",id:"method-2-windows-defender-firewall-gui",level:3},{value:"Windows Firewall Troubleshooting",id:"windows-firewall-troubleshooting",level:3},{value:"Windows Advanced Security",id:"windows-advanced-security",level:3},{value:"Linux Firewall Configuration",id:"linux-firewall-configuration",level:2},{value:"UFW (Ubuntu/Debian)",id:"ufw-ubuntudebian",level:3},{value:"firewalld (RHEL/CentOS/Fedora)",id:"firewalld-rhelcentosfedora",level:3},{value:"iptables (Advanced)",id:"iptables-advanced",level:3},{value:"nftables (Modern Linux)",id:"nftables-modern-linux",level:3},{value:"macOS Firewall Configuration",id:"macos-firewall-configuration",level:2},{value:"Method 1: System Preferences GUI",id:"method-1-system-preferences-gui",level:3},{value:"Method 2: pfctl (Command Line)",id:"method-2-pfctl-command-line",level:3},{value:"Method 3: Application Firewall (socketfilterfw)",id:"method-3-application-firewall-socketfilterfw",level:3},{value:"macOS Network Diagnostics",id:"macos-network-diagnostics",level:3},{value:"Persistent Configuration",id:"persistent-configuration",level:3},{value:"Firewall Testing and Verification",id:"firewall-testing-and-verification",level:2},{value:"Test Port Accessibility",id:"test-port-accessibility",level:3},{value:"Monitor Firewall Activity",id:"monitor-firewall-activity",level:3},{value:"Security Best Practices",id:"security-best-practices",level:2},{value:"Essential Rules",id:"essential-rules",level:3},{value:"Monitoring Tools",id:"monitoring-tools",level:3},{value:"Common Issues and Solutions",id:"common-issues-and-solutions",level:2},{value:"Issue: Firewall Blocking Despite Rules",id:"issue-firewall-blocking-despite-rules",level:3},{value:"Issue: Multiple Firewalls Conflict",id:"issue-multiple-firewalls-conflict",level:3},{value:"Issue: Firewall Rules Not Persisting",id:"issue-firewall-rules-not-persisting",level:3}];function f(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"operating-system-firewalls",children:"Operating System Firewalls"})}),"\n",(0,i.jsx)(n.p,{children:"After configuring your router, you must also configure your operating system's firewall to allow Autonomys Network traffic."}),"\n",(0,i.jsx)(n.h2,{id:"quick-setup-by-os",children:"Quick Setup by OS"}),"\n",(0,i.jsxs)(t.A,{children:[(0,i.jsxs)(o.A,{value:"windows",label:"Windows",default:!0,children:[(0,i.jsx)(n.h2,{id:"windows-firewall-configuration",children:"Windows Firewall Configuration"}),(0,i.jsx)(n.h3,{id:"method-1-powershell-recommended",children:"Method 1: PowerShell (Recommended)"}),(0,i.jsx)(n.p,{children:"Run PowerShell as Administrator and execute:"}),(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-powershell",children:'# Space Acres users - only need these two\nNew-NetFirewallRule -DisplayName "Autonomys Consensus" `\n    -Direction Inbound -Protocol TCP -LocalPort 30333 -Action Allow\nNew-NetFirewallRule -DisplayName "Autonomys DSN" `\n    -Direction Inbound -Protocol TCP -LocalPort 30433 -Action Allow\n\n# CLI Farmers - add this additional port\nNew-NetFirewallRule -DisplayName "Autonomys Farmer" `\n    -Direction Inbound -Protocol TCP -LocalPort 30533 -Action Allow\n\n# Verify rules were created successfully\nGet-NetFirewallRule -DisplayName "Autonomys*" |\n    Format-Table DisplayName, Enabled, Direction, Action\n\n# Expected output:\n# DisplayName          Enabled Direction Action\n# -----------          ------- --------- ------\n# Autonomys Consensus  True    Inbound   Allow\n# Autonomys DSN        True    Inbound   Allow\n# Autonomys Farmer     True    Inbound   Allow\n'})}),(0,i.jsx)(n.h3,{id:"method-2-windows-defender-firewall-gui",children:"Method 2: Windows Defender Firewall GUI"}),(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Open Windows Defender Firewall"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Press ",(0,i.jsx)(n.code,{children:"Win + R"}),", type ",(0,i.jsx)(n.code,{children:"wf.msc"}),", press Enter"]}),"\n",(0,i.jsx)(n.li,{children:"Or: Control Panel \u2192 System and Security \u2192 Windows Defender Firewall \u2192 Advanced Settings"}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Create Inbound Rules"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:'Click "Inbound Rules" in left panel'}),"\n",(0,i.jsx)(n.li,{children:'Click "New Rule..." in right panel'}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Configure Rule (repeat for each port)"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:'Rule Type: Select "Port" \u2192 Next'}),"\n",(0,i.jsxs)(n.li,{children:["Protocol and Ports:","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:'Select "TCP"'}),"\n",(0,i.jsx)(n.li,{children:'Select "Specific local ports"'}),"\n",(0,i.jsx)(n.li,{children:"Enter port number (30333, 30433, or 30533) \u2192 Next"}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.li,{children:'Action: Select "Allow the connection" \u2192 Next'}),"\n",(0,i.jsx)(n.li,{children:"Profile: Check all three (Domain, Private, Public) \u2192 Next"}),"\n",(0,i.jsxs)(n.li,{children:["Name:","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:'Name: "Autonomys Consensus" (for 30333)'}),"\n",(0,i.jsx)(n.li,{children:'Description: "Allow Autonomys Network consensus P2P"'}),"\n",(0,i.jsx)(n.li,{children:"Finish"}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Verify Rules"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Rules should appear in the Inbound Rules list"}),"\n",(0,i.jsx)(n.li,{children:'Ensure they show as "Enabled: Yes"'}),"\n"]}),"\n"]}),"\n"]}),(0,i.jsx)(n.h3,{id:"windows-firewall-troubleshooting",children:"Windows Firewall Troubleshooting"}),(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Check if ports are blocked:"})}),(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-powershell",children:"# Test if firewall is blocking\nTest-NetConnection -ComputerName localhost -Port 30333\n\n# Check which program is using a port\nnetstat -ano | findstr :30333\n\n# Get process name from PID\nGet-Process -Id (Get-NetTCPConnection -LocalPort 30333).OwningProcess\n"})}),(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Temporarily disable firewall (for testing only):"})}),(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-powershell",children:"# Disable firewall temporarily\nSet-NetFirewallProfile -Profile Domain,Public,Private -Enabled False\n\n# Remember to re-enable!\nSet-NetFirewallProfile -Profile Domain,Public,Private -Enabled True\n"})}),(0,i.jsx)(n.h3,{id:"windows-advanced-security",children:"Windows Advanced Security"}),(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Add application-specific rules:"})}),(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-powershell",children:'# For Space Acres executable\nNew-NetFirewallRule -DisplayName "Space Acres Application" `\n    -Direction Inbound `\n    -Program "C:\\Program Files\\Space Acres\\space-acres.exe" `\n    -Action Allow\n\n# For CLI node\nNew-NetFirewallRule -DisplayName "Subspace Node" `\n    -Direction Inbound `\n    -Program "C:\\subspace\\subspace-node.exe" `\n    -Action Allow\n'})}),(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Create outbound rules (usually not needed):"})}),(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-powershell",children:'# If outbound is restricted\nNew-NetFirewallRule -DisplayName "Autonomys Outbound" `\n    -Direction Outbound -Protocol TCP `\n    -RemotePort 30333,30433,30533 -Action Allow\n'})})]}),(0,i.jsxs)(o.A,{value:"linux",label:"Linux",children:[(0,i.jsx)(n.h2,{id:"linux-firewall-configuration",children:"Linux Firewall Configuration"}),(0,i.jsx)(n.h3,{id:"ufw-ubuntudebian",children:"UFW (Ubuntu/Debian)"}),(0,i.jsx)(n.p,{children:"UFW (Uncomplicated Firewall) is the easiest firewall tool for Ubuntu and Debian systems."}),(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"# Check if UFW is installed\nsudo ufw version\n\n# If not installed\nsudo apt update && sudo apt install ufw\n\n# Enable UFW (careful if SSH connected)\nsudo ufw enable\n\n# Allow SSH first if remotely connected\nsudo ufw allow ssh\n\n# Allow Autonomys ports\nsudo ufw allow 30333/tcp comment 'Autonomys Consensus'\nsudo ufw allow 30433/tcp comment 'Autonomys DSN'\nsudo ufw allow 30533/tcp comment 'Autonomys Farmer'  # CLI only\n\n# Check status and rules\nsudo ufw status verbose\n\n# Expected output:\n# Status: active\n# To                         Action      From\n# --                         ------      ----\n# 30333/tcp                  ALLOW       Anywhere\n# 30433/tcp                  ALLOW       Anywhere\n# 30533/tcp                  ALLOW       Anywhere\n"})}),(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Advanced UFW configurations:"})}),(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"# Allow from specific subnet only\nsudo ufw allow from 192.168.1.0/24 to any port 9944 proto tcp\n\n# Rate limiting (prevent DoS)\nsudo ufw limit 30333/tcp\n\n# Delete a rule\nsudo ufw delete allow 30333/tcp\n\n# Reset all rules\nsudo ufw --force reset\n"})}),(0,i.jsx)(n.h3,{id:"firewalld-rhelcentosfedora",children:"firewalld (RHEL/CentOS/Fedora)"}),(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:'# Check if firewalld is running\nsudo systemctl status firewalld\n\n# Add Autonomys ports\nsudo firewall-cmd --permanent --add-port=30333/tcp\nsudo firewall-cmd --permanent --add-port=30433/tcp\nsudo firewall-cmd --permanent --add-port=30533/tcp\n\n# Reload to apply changes\nsudo firewall-cmd --reload\n\n# Verify configuration\nsudo firewall-cmd --list-ports\n\n# Create custom service definition\nsudo tee /etc/firewalld/services/autonomys.xml << EOF\n<?xml version="1.0" encoding="utf-8"?>\n<service>\n  <short>Autonomys Network</short>\n  <description>Autonomys consensus and farming ports</description>\n  <port protocol="tcp" port="30333"/>\n  <port protocol="tcp" port="30433"/>\n  <port protocol="tcp" port="30533"/>\n</service>\nEOF\n\n# Use the service\nsudo firewall-cmd --permanent --add-service=autonomys\nsudo firewall-cmd --reload\n'})}),(0,i.jsx)(n.h3,{id:"iptables-advanced",children:"iptables (Advanced)"}),(0,i.jsx)(n.p,{children:"For systems without UFW or firewalld:"}),(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:'# View current rules\nsudo iptables -L -n -v\n\n# Add Autonomys rules\nsudo iptables -A INPUT -p tcp --dport 30333 -j ACCEPT -m comment --comment "Autonomys Consensus"\nsudo iptables -A INPUT -p tcp --dport 30433 -j ACCEPT -m comment --comment "Autonomys DSN"\nsudo iptables -A INPUT -p tcp --dport 30533 -j ACCEPT -m comment --comment "Autonomys Farmer"\n\n# Save rules (varies by distribution)\n# Ubuntu/Debian:\nsudo apt install iptables-persistent\nsudo netfilter-persistent save\n\n# RHEL/CentOS:\nsudo service iptables save\n\n# Arch:\nsudo iptables-save > /etc/iptables/iptables.rules\n'})}),(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Advanced iptables security:"})}),(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:'# Rate limiting\nsudo iptables -A INPUT -p tcp --dport 30333 \\\n    -m connlimit --connlimit-above 50 -j REJECT\n\n# Log connections (for debugging)\nsudo iptables -A INPUT -p tcp --dport 30333 \\\n    -j LOG --log-prefix "Autonomys:" --log-level 4\n\n# Country-based filtering (requires xtables-addons)\nsudo iptables -A INPUT -m geoip --src-cc CN,RU -j DROP\n'})}),(0,i.jsx)(n.h3,{id:"nftables-modern-linux",children:"nftables (Modern Linux)"}),(0,i.jsx)(n.p,{children:"The modern replacement for iptables:"}),(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:'# Create Autonomys ruleset\nsudo nft add table inet autonomys\nsudo nft add chain inet autonomys input { type filter hook input priority 0\\; }\n\n# Add rules\nsudo nft add rule inet autonomys input tcp dport 30333 accept comment \\"Consensus\\"\nsudo nft add rule inet autonomys input tcp dport 30433 accept comment \\"DSN\\"\nsudo nft add rule inet autonomys input tcp dport 30533 accept comment \\"Farmer\\"\n\n# Save configuration\nsudo nft list ruleset > /etc/nftables.conf\n'})})]}),(0,i.jsxs)(o.A,{value:"macos",label:"macOS",children:[(0,i.jsx)(n.h2,{id:"macos-firewall-configuration",children:"macOS Firewall Configuration"}),(0,i.jsx)(n.h3,{id:"method-1-system-preferences-gui",children:"Method 1: System Preferences GUI"}),(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Open Firewall Settings"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Apple Menu \u2192 System Preferences \u2192 Security & Privacy \u2192 Firewall"}),"\n",(0,i.jsx)(n.li,{children:"Click the lock icon to make changes"}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Configure Firewall"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:'Click "Firewall Options..."'}),"\n",(0,i.jsxs)(n.li,{children:['Ensure "Block all incoming connections" is ',(0,i.jsx)(n.strong,{children:"unchecked"})]}),"\n",(0,i.jsxs)(n.li,{children:["Add Space Acres or subspace-node to allowed apps:","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:'Click "+" button'}),"\n",(0,i.jsx)(n.li,{children:"Navigate to application"}),"\n",(0,i.jsx)(n.li,{children:'Select and click "Add"'}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Enable Firewall"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Turn on Firewall if not already enabled"}),"\n"]}),"\n"]}),"\n"]}),(0,i.jsx)(n.h3,{id:"method-2-pfctl-command-line",children:"Method 2: pfctl (Command Line)"}),(0,i.jsx)(n.p,{children:"macOS uses pfctl (packet filter) for advanced firewall configuration."}),(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:'# Create Autonomys rules file\nsudo tee /etc/pf.anchors/autonomys << \'EOF\'\n# Autonomys Network Port Configuration\n# Allow incoming connections on Autonomys ports\npass in inet proto tcp from any to any port 30333\npass in inet proto tcp from any to any port 30433\npass in inet proto tcp from any to any port 30533\nEOF\n\n# Load the anchor in main pf.conf\nsudo cp /etc/pf.conf /etc/pf.conf.backup\necho "anchor \\"autonomys\\"" | sudo tee -a /etc/pf.conf\necho "load anchor \\"autonomys\\" from \\"/etc/pf.anchors/autonomys\\"" | sudo tee -a /etc/pf.conf\n\n# Enable and load rules\nsudo pfctl -e -f /etc/pf.conf\n\n# Verify rules are loaded\nsudo pfctl -s rules | grep 30333\n'})}),(0,i.jsx)(n.h3,{id:"method-3-application-firewall-socketfilterfw",children:"Method 3: Application Firewall (socketfilterfw)"}),(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"# Check firewall status\n/usr/libexec/ApplicationFirewall/socketfilterfw --getglobalstate\n\n# Allow specific application\n/usr/libexec/ApplicationFirewall/socketfilterfw --add /Applications/Space\\ Acres.app\n/usr/libexec/ApplicationFirewall/socketfilterfw --unblockapp /Applications/Space\\ Acres.app\n\n# For CLI tools\n/usr/libexec/ApplicationFirewall/socketfilterfw --add /usr/local/bin/subspace-node\n/usr/libexec/ApplicationFirewall/socketfilterfw --unblockapp /usr/local/bin/subspace-node\n\n# List all rules\n/usr/libexec/ApplicationFirewall/socketfilterfw --listapps\n"})}),(0,i.jsx)(n.h3,{id:"macos-network-diagnostics",children:"macOS Network Diagnostics"}),(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:'# Check listening ports\nsudo lsof -iTCP -sTCP:LISTEN -P | grep -E "30333|30433|30533"\n\n# Test connectivity\nnc -zv localhost 30333\n\n# Monitor network connections\nnettop -m tcp\n\n# Check for blocking rules\nsudo pfctl -s rules\n'})}),(0,i.jsx)(n.h3,{id:"persistent-configuration",children:"Persistent Configuration"}),(0,i.jsx)(n.p,{children:"To make pfctl rules persistent across reboots:"}),(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:'# Create launch daemon\nsudo tee /Library/LaunchDaemons/com.autonomys.pf.plist << \'EOF\'\n<?xml version="1.0" encoding="UTF-8"?>\n<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">\n<plist version="1.0">\n<dict>\n    <key>Label</key>\n    <string>com.autonomys.pf</string>\n    <key>ProgramArguments</key>\n    <array>\n        <string>/sbin/pfctl</string>\n        <string>-e</string>\n        <string>-f</string>\n        <string>/etc/pf.conf</string>\n    </array>\n    <key>RunAtLoad</key>\n    <true/>\n</dict>\n</plist>\nEOF\n\n# Load the daemon\nsudo launchctl load /Library/LaunchDaemons/com.autonomys.pf.plist\n'})})]})]}),"\n",(0,i.jsx)(n.h2,{id:"firewall-testing-and-verification",children:"Firewall Testing and Verification"}),"\n",(0,i.jsx)(n.h3,{id:"test-port-accessibility",children:"Test Port Accessibility"}),"\n",(0,i.jsxs)(t.A,{children:[(0,i.jsx)(o.A,{value:"local",label:"Local Testing",children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:'# Check if ports are listening\n# Linux/macOS:\nsudo netstat -tuln | grep -E "30333|30433|30533"\nsudo lsof -i :30333\n\n# Windows PowerShell:\nGet-NetTCPConnection -LocalPort 30333,30433,30533\n\n# Test local connectivity\ntelnet localhost 30333\nnc -zv localhost 30333\n'})})}),(0,i.jsxs)(o.A,{value:"external",label:"External Testing",children:[(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"# Get your public IP\ncurl -s https://api.ipify.org\n\n# Have someone external test (or use VPN)\nnc -zv YOUR_PUBLIC_IP 30333\n\n# Online port checkers\n# Visit: https://canyouseeme.org\n# Enter port 30333 and test\n"})}),(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Expected results:"})}),(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(a.A,{icon:c.Ze.CHECK_CIRCLE})," Port open/reachable"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(a.A,{icon:c.Ze.CLOSE_CIRCLE})," Port closed = firewall blocking"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(a.A,{icon:c.Ze.CLOSE_CIRCLE})," Port filtered = router not forwarding"]}),"\n"]})]})]}),"\n",(0,i.jsx)(n.h3,{id:"monitor-firewall-activity",children:"Monitor Firewall Activity"}),"\n",(0,i.jsxs)(t.A,{children:[(0,i.jsx)(o.A,{value:"linux",label:"Linux",children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:'# UFW logs\nsudo tail -f /var/log/ufw.log\n\n# iptables logging\nsudo dmesg | grep -i "autonomys"\nsudo journalctl -f | grep -i "firewall"\n\n# Connection tracking\nsudo conntrack -L | grep -E "30333|30433|30533"\n\n# Watch live connections\nwatch -n 1 \'ss -tuln | grep -E "30333|30433|30533"\'\n'})})}),(0,i.jsx)(o.A,{value:"windows",label:"Windows",children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-powershell",children:'# Windows Firewall logs\nGet-Content C:\\Windows\\System32\\LogFiles\\Firewall\\pfirewall.log -Tail 50\n\n# Enable logging if needed\nnetsh advfirewall set currentprofile logging filename %SystemRoot%\\System32\\LogFiles\\Firewall\\pfirewall.log\n\n# Monitor connections\nGet-NetTCPConnection | Where-Object {$_.LocalPort -in @(30333,30433,30533)}\n\n# Watch for blocked connections\nGet-WinEvent -FilterHashtable @{LogName="Security"; ID=5152} | Select-Object -First 10\n'})})}),(0,i.jsx)(o.A,{value:"macos",label:"macOS",children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"# Check pfctl statistics\nsudo pfctl -s info\n\n# Monitor pf logs\nsudo tcpdump -n -e -ttt -i pflog0\n\n# Application firewall logs\nsudo log show --predicate 'process == \"socketfilterfw\"' --last 1h\n\n# Network connections\nsudo lsof -i TCP:30333\n"})})})]}),"\n",(0,i.jsx)(n.h2,{id:"security-best-practices",children:"Security Best Practices"}),"\n",(0,i.jsx)(n.h3,{id:"essential-rules",children:"Essential Rules"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(a.A,{icon:c.Ze.CHECK_CIRCLE})," ",(0,i.jsx)(n.strong,{children:"DO:"})]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Only open required ports"}),"\n",(0,i.jsx)(n.li,{children:"Use specific port numbers (not ranges)"}),"\n",(0,i.jsx)(n.li,{children:"Keep firewall enabled always"}),"\n",(0,i.jsx)(n.li,{children:"Log suspicious activity"}),"\n",(0,i.jsx)(n.li,{children:"Regular security updates"}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(a.A,{icon:c.Ze.CLOSE_CIRCLE})," ",(0,i.jsx)(n.strong,{children:"DON'T:"})]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Disable firewall for testing (use specific rules)"}),"\n",(0,i.jsx)(n.li,{children:"Open all ports (DMZ mode)"}),"\n",(0,i.jsx)(n.li,{children:"Expose RPC ports (9944, 9945)"}),"\n",(0,i.jsx)(n.li,{children:"Ignore firewall logs"}),"\n",(0,i.jsx)(n.li,{children:"Use permissive rules (allow all)"}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"monitoring-tools",children:"Monitoring Tools"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Recommended security tools:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"fail2ban"})," (Linux) - Automatic IP banning"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"pfBlockerNG"})," (pfSense) - Advanced filtering"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Little Snitch"})," (macOS) - Application firewall"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"GlassWire"})," (Windows) - Network monitor"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"common-issues-and-solutions",children:"Common Issues and Solutions"}),"\n",(0,i.jsx)(n.h3,{id:"issue-firewall-blocking-despite-rules",children:"Issue: Firewall Blocking Despite Rules"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Diagnosis:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"# Check if application has permission\n# Linux: Check SELinux/AppArmor\nsestatus\naa-status\n\n# Windows: Check Windows Defender\nGet-MpPreference | Select-Object ExclusionPath\n\n# macOS: Check app signature\ncodesign -v /Applications/Space\\ Acres.app\n"})}),"\n",(0,i.jsx)(n.h3,{id:"issue-multiple-firewalls-conflict",children:"Issue: Multiple Firewalls Conflict"}),"\n",(0,i.jsx)(n.p,{children:"Some systems have multiple firewall layers:"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsx)(n.li,{children:"Cloud provider firewall (AWS/Azure/GCP)"}),"\n",(0,i.jsx)(n.li,{children:"OS firewall (UFW/iptables/Windows)"}),"\n",(0,i.jsx)(n.li,{children:"Third-party antivirus firewall"}),"\n",(0,i.jsx)(n.li,{children:"Docker/container firewall"}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Solution:"})," Configure all layers consistently."]}),"\n",(0,i.jsx)(n.h3,{id:"issue-firewall-rules-not-persisting",children:"Issue: Firewall Rules Not Persisting"}),"\n",(0,i.jsxs)(t.A,{children:[(0,i.jsx)(o.A,{value:"linux",label:"Linux",children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"# Make UFW rules persistent\nsudo ufw enable\n\n# Save iptables rules\nsudo apt install iptables-persistent\nsudo netfilter-persistent save\n\n# Check startup services\nsudo systemctl enable ufw\nsudo systemctl enable netfilter-persistent\n"})})}),(0,i.jsx)(o.A,{value:"windows",label:"Windows",children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-powershell",children:'# Export firewall rules\nnetsh advfirewall export "C:\\firewall-backup.wfw"\n\n# Import on system restart\nnetsh advfirewall import "C:\\firewall-backup.wfw"\n\n# Create scheduled task for persistence\n$action = New-ScheduledTaskAction -Execute "netsh" `\n    -Argument "advfirewall import C:\\firewall-backup.wfw"\n$trigger = New-ScheduledTaskTrigger -AtStartup\nRegister-ScheduledTask -TaskName "RestoreFirewall" `\n    -Action $action -Trigger $trigger -RunLevel Highest\n'})})})]})]})}function m(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(f,{...e})}):f(e)}},72206:(e,n,l)=>{l.d(n,{A:()=>v});var s=l(96540),i=l(18215),r=l(80052),t=l(56347),o=l(35793),a=l(99025),c=l(4430),d=l(44148);function u(e){return s.Children.toArray(e).filter((e=>"\n"!==e)).map((e=>{if(!e||(0,s.isValidElement)(e)&&function(e){const{props:n}=e;return!!n&&"object"==typeof n&&"value"in n}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}function p(e){const{values:n,children:l}=e;return(0,s.useMemo)((()=>{const e=n??function(e){return u(e).map((e=>{let{props:{value:n,label:l,attributes:s,default:i}}=e;return{value:n,label:l,attributes:s,default:i}}))}(l);return function(e){const n=(0,c.XI)(e,((e,n)=>e.value===n.value));if(n.length>0)throw new Error(`Docusaurus error: Duplicate values "${n.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[n,l])}function h(e){let{value:n,tabValues:l}=e;return l.some((e=>e.value===n))}function f(e){let{queryString:n=!1,groupId:l}=e;const i=(0,t.W6)(),r=function(e){let{queryString:n=!1,groupId:l}=e;if("string"==typeof n)return n;if(!1===n)return null;if(!0===n&&!l)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return l??null}({queryString:n,groupId:l});return[(0,a.aZ)(r),(0,s.useCallback)((e=>{if(!r)return;const n=new URLSearchParams(i.location.search);n.set(r,e),i.replace({...i.location,search:n.toString()})}),[r,i])]}function m(e){const{defaultValue:n,queryString:l=!1,groupId:i}=e,r=p(e),[t,a]=(0,s.useState)((()=>function(e){let{defaultValue:n,tabValues:l}=e;if(0===l.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(n){if(!h({value:n,tabValues:l}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${n}" but none of its children has the corresponding value. Available values are: ${l.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return n}const s=l.find((e=>e.default))??l[0];if(!s)throw new Error("Unexpected error: 0 tabValues");return s.value}({defaultValue:n,tabValues:r}))),[c,u]=f({queryString:l,groupId:i}),[m,w]=function(e){let{groupId:n}=e;const l=function(e){return e?`docusaurus.tab.${e}`:null}(n),[i,r]=(0,d.Dv)(l);return[i,(0,s.useCallback)((e=>{l&&r.set(e)}),[l,r])]}({groupId:i}),x=(()=>{const e=c??m;return h({value:e,tabValues:r})?e:null})();(0,o.A)((()=>{x&&a(x)}),[x]);return{selectedValue:t,selectValue:(0,s.useCallback)((e=>{if(!h({value:e,tabValues:r}))throw new Error(`Can't select invalid tab value=${e}`);a(e),u(e),w(e)}),[u,w,r]),tabValues:r}}var w=l(75251);const x={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};var g=l(74848);function b(e){let{className:n,block:l,selectedValue:s,selectValue:t,tabValues:o}=e;const a=[],{blockElementScrollPositionUntilNextRender:c}=(0,r.a_)(),d=e=>{const n=e.currentTarget,l=a.indexOf(n),i=o[l].value;i!==s&&(c(n),t(i))},u=e=>{let n=null;switch(e.key){case"Enter":d(e);break;case"ArrowRight":{const l=a.indexOf(e.currentTarget)+1;n=a[l]??a[0];break}case"ArrowLeft":{const l=a.indexOf(e.currentTarget)-1;n=a[l]??a[a.length-1];break}}n?.focus()};return(0,g.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,i.A)("tabs",{"tabs--block":l},n),children:o.map((e=>{let{value:n,label:l,attributes:r}=e;return(0,g.jsx)("li",{role:"tab",tabIndex:s===n?0:-1,"aria-selected":s===n,ref:e=>{a.push(e)},onKeyDown:u,onClick:d,...r,className:(0,i.A)("tabs__item",x.tabItem,r?.className,{"tabs__item--active":s===n}),children:l??n},n)}))})}function j(e){let{lazy:n,children:l,selectedValue:r}=e;const t=(Array.isArray(l)?l:[l]).filter(Boolean);if(n){const e=t.find((e=>e.props.value===r));return e?(0,s.cloneElement)(e,{className:(0,i.A)("margin-top--md",e.props.className)}):null}return(0,g.jsx)("div",{className:"margin-top--md",children:t.map(((e,n)=>(0,s.cloneElement)(e,{key:n,hidden:e.props.value!==r})))})}function y(e){const n=m(e);return(0,g.jsxs)("div",{className:(0,i.A)("tabs-container",x.tabList),children:[(0,g.jsx)(b,{...n,...e}),(0,g.jsx)(j,{...n,...e})]})}function v(e){const n=(0,w.A)();return(0,g.jsx)(y,{...e,children:u(e.children)},String(n))}},82223:(e,n,l)=>{l.d(n,{A:()=>t});l(96540);var s=l(18215);const i={tabItem:"tabItem_Ymn6"};var r=l(74848);function t(e){let{children:n,hidden:l,className:t}=e;return(0,r.jsx)("div",{role:"tabpanel",className:(0,s.A)(i.tabItem,t),hidden:l,children:n})}}}]);