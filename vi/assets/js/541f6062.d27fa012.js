"use strict";(self.webpackChunkportal=self.webpackChunkportal||[]).push([[7963],{28453:(e,t,n)=>{n.d(t,{R:()=>s,x:()=>i});var r=n(96540);const l={},o=r.createContext(l);function s(e){const t=r.useContext(o);return r.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function i(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(l):e.components||l:s(e.components),r.createElement(o.Provider,{value:t},e.children)}},37452:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>h,contentTitle:()=>d,default:()=>f,frontMatter:()=>u,metadata:()=>r,toc:()=>x});const r=JSON.parse('{"id":"farming-&-staking/network/port-config/farming-cluster","title":"Farming Cluster","description":"Network configuration for large-scale farming cluster deployments","source":"@site/i18n/vi/docusaurus-plugin-content-docs/current/farming-&-staking/network/port-config/farming-cluster.mdx","sourceDirName":"farming-&-staking/network/port-config","slug":"/network/port-config/farming-cluster","permalink":"/vi/network/port-config/farming-cluster","draft":false,"unlisted":false,"editUrl":"https://github.com/autonomys/subspace-docs/edit/main/docs/farming-&-staking/network/port-config/farming-cluster.mdx","tags":[],"version":"current","sidebarPosition":4,"frontMatter":{"title":"Farming Cluster","sidebar_position":4,"description":"Network configuration for large-scale farming cluster deployments","slug":"/network/port-config/farming-cluster","keywords":["Farming Cluster","Cluster Network","NATS Server","Controller Setup","Multiple Farmers"]},"sidebar":"tutorialSidebar","previous":{"title":"Domain Operator","permalink":"/vi/network/port-config/domain-operator"},"next":{"title":"Timekeeper","permalink":"/vi/network/port-config/timekeeper"}}');var l=n(74848),o=n(28453),s=n(72206),i=n(82223),a=n(15912),c=n(76122);const u={title:"Farming Cluster",sidebar_position:4,description:"Network configuration for large-scale farming cluster deployments",slug:"/network/port-config/farming-cluster",keywords:["Farming Cluster","Cluster Network","NATS Server","Controller Setup","Multiple Farmers"]},d="Farming Cluster",h={},x=[{value:"Cluster Architecture",id:"cluster-architecture",level:2},{value:"Port Requirements",id:"port-requirements",level:2},{value:"Network Setup Guide",id:"network-setup-guide",level:2},{value:"Step 1: Controller Machine Configuration",id:"step-1-controller-machine-configuration",level:3},{value:"Step 2: Farmer Machines Configuration",id:"step-2-farmer-machines-configuration",level:3},{value:"Step 3: Internal Network Configuration",id:"step-3-internal-network-configuration",level:3}];function m(e){const t={admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",mermaid:"mermaid",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,o.R)(),...e.components};return(0,l.jsxs)(l.Fragment,{children:[(0,l.jsx)(t.header,{children:(0,l.jsx)(t.h1,{id:"farming-cluster",children:"Farming Cluster"})}),"\n",(0,l.jsx)(t.p,{children:"A farming cluster allows you to scale your operation across multiple machines and storage devices for maximum efficiency and redundancy."}),"\n",(0,l.jsx)(t.h2,{id:"cluster-architecture",children:"Cluster Architecture"}),"\n",(0,l.jsx)(t.mermaid,{value:'graph LR\n    subgraph " "\n        Node("Node<br/>30333, 30433")\n        Controller("Controller<br/>30533")\n        NATS("NATS<br/>4222")\n        Farm1("Farmer 1")\n        Farm3("Farmer N")\n        Cache("Cache Server")\n        Plotter("Plotter")\n\n        Node <--\x3e|"RPC<br/>9944"| Controller\n        Controller <--\x3e|"Coordinates"| NATS\n        Farm1 <--\x3e|"NATS msgs"| NATS\n        Farm3 <--\x3e|"NATS msgs"| NATS\n        Cache <--\x3e|"NATS msgs"| NATS\n        Plotter <--\x3e|"NATS msgs"| NATS\n    end\n\n    subgraph "  "\n        Peer1([Peer 1])\n        Peer2([Peer 2])\n        Peer3([Peer 3])\n    end\n\n    Node <--\x3e|"P2P"| Peer1\n    Node <--\x3e|"P2P"| Peer2\n    Controller <--\x3e|"P2P"| Peer1\n    Controller <--\x3e|"P2P"| Peer3'}),"\n",(0,l.jsxs)(t.p,{children:[(0,l.jsx)(t.strong,{children:"Key Concept:"})," The controller connects to the blockchain node via RPC and coordinates all cluster components (cache, plotters, farmers) through NATS messaging. Only the controller talks to the blockchain; farmers communicate through the controller."]}),"\n",(0,l.jsx)(t.h2,{id:"port-requirements",children:"Port Requirements"}),"\n",(0,l.jsxs)(t.table,{children:[(0,l.jsx)(t.thead,{children:(0,l.jsxs)(t.tr,{children:[(0,l.jsx)(t.th,{style:{textAlign:"left"},children:"Port"}),(0,l.jsx)(t.th,{style:{textAlign:"left"},children:"Protocol"}),(0,l.jsx)(t.th,{style:{textAlign:"left"},children:"Component"}),(0,l.jsx)(t.th,{style:{textAlign:"left"},children:"Purpose"}),(0,l.jsx)(t.th,{style:{textAlign:"left"},children:"Expose to Internet"})]})}),(0,l.jsxs)(t.tbody,{children:[(0,l.jsxs)(t.tr,{children:[(0,l.jsx)(t.td,{style:{textAlign:"left"},children:(0,l.jsx)(t.strong,{children:"30333"})}),(0,l.jsx)(t.td,{style:{textAlign:"left"},children:"TCP"}),(0,l.jsx)(t.td,{style:{textAlign:"left"},children:"Node"}),(0,l.jsx)(t.td,{style:{textAlign:"left"},children:"Consensus P2P"}),(0,l.jsxs)(t.td,{style:{textAlign:"left"},children:[(0,l.jsx)(a.A,{icon:c.Ze.CHECK_CIRCLE})," Yes"]})]}),(0,l.jsxs)(t.tr,{children:[(0,l.jsx)(t.td,{style:{textAlign:"left"},children:(0,l.jsx)(t.strong,{children:"30433"})}),(0,l.jsx)(t.td,{style:{textAlign:"left"},children:"TCP"}),(0,l.jsx)(t.td,{style:{textAlign:"left"},children:"Node"}),(0,l.jsx)(t.td,{style:{textAlign:"left"},children:"DSN communication"}),(0,l.jsxs)(t.td,{style:{textAlign:"left"},children:[(0,l.jsx)(a.A,{icon:c.Ze.CHECK_CIRCLE})," Yes"]})]}),(0,l.jsxs)(t.tr,{children:[(0,l.jsx)(t.td,{style:{textAlign:"left"},children:(0,l.jsx)(t.strong,{children:"30533"})}),(0,l.jsx)(t.td,{style:{textAlign:"left"},children:"TCP"}),(0,l.jsx)(t.td,{style:{textAlign:"left"},children:"Controller"}),(0,l.jsx)(t.td,{style:{textAlign:"left"},children:"Cluster Controller P2P"}),(0,l.jsxs)(t.td,{style:{textAlign:"left"},children:[(0,l.jsx)(a.A,{icon:c.Ze.CHECK_CIRCLE})," Yes"]})]}),(0,l.jsxs)(t.tr,{children:[(0,l.jsx)(t.td,{style:{textAlign:"left"},children:(0,l.jsx)(t.strong,{children:"9944"})}),(0,l.jsx)(t.td,{style:{textAlign:"left"},children:"TCP"}),(0,l.jsx)(t.td,{style:{textAlign:"left"},children:"Node \u2192 Controller"}),(0,l.jsx)(t.td,{style:{textAlign:"left"},children:"RPC communication"}),(0,l.jsxs)(t.td,{style:{textAlign:"left"},children:[(0,l.jsx)(a.A,{icon:c.Ze.CLOSE_CIRCLE})," Internal only"]})]}),(0,l.jsxs)(t.tr,{children:[(0,l.jsx)(t.td,{style:{textAlign:"left"},children:(0,l.jsx)(t.strong,{children:"4222"})}),(0,l.jsx)(t.td,{style:{textAlign:"left"},children:"TCP"}),(0,l.jsx)(t.td,{style:{textAlign:"left"},children:"NATS \u2194 All cluster components*"}),(0,l.jsx)(t.td,{style:{textAlign:"left"},children:"Internal coordination"}),(0,l.jsxs)(t.td,{style:{textAlign:"left"},children:[(0,l.jsx)(a.A,{icon:c.Ze.CLOSE_CIRCLE})," Internal only"]})]})]})]}),"\n",(0,l.jsxs)(t.p,{children:[(0,l.jsx)(t.strong,{children:"*NATS connects to:"})," Controller, Cache, Plotter, Farmer (but NOT the Node)"]}),"\n",(0,l.jsx)(t.admonition,{title:"Cluster Communication",type:"tip",children:(0,l.jsxs)(t.ul,{children:["\n",(0,l.jsxs)(t.li,{children:[(0,l.jsx)(t.strong,{children:"Node"}),": Handles blockchain P2P (30333, 30433) and provides RPC to controller (9944)"]}),"\n",(0,l.jsxs)(t.li,{children:[(0,l.jsx)(t.strong,{children:"Controller"}),": Talks to node via RPC (9944), connects to blockchain peers (30533), and coordinates via NATS (4222)"]}),"\n",(0,l.jsxs)(t.li,{children:[(0,l.jsx)(t.strong,{children:"All other components"}),": Only communicate through NATS (4222) - no direct blockchain access"]}),"\n"]})}),"\n",(0,l.jsx)(t.h2,{id:"network-setup-guide",children:"Network Setup Guide"}),"\n",(0,l.jsx)(t.h3,{id:"step-1-controller-machine-configuration",children:"Step 1: Controller Machine Configuration"}),"\n",(0,l.jsxs)(s.A,{children:[(0,l.jsxs)(i.A,{value:"router",label:"Router Setup",children:[(0,l.jsx)(t.p,{children:"Configure these port forwarding rules for the controller machine:"}),(0,l.jsxs)(t.table,{children:[(0,l.jsx)(t.thead,{children:(0,l.jsxs)(t.tr,{children:[(0,l.jsx)(t.th,{style:{textAlign:"left"},children:"Service"}),(0,l.jsx)(t.th,{style:{textAlign:"left"},children:"External Port"}),(0,l.jsx)(t.th,{style:{textAlign:"left"},children:"Internal IP"}),(0,l.jsx)(t.th,{style:{textAlign:"left"},children:"Internal Port"}),(0,l.jsx)(t.th,{style:{textAlign:"left"},children:"Protocol"})]})}),(0,l.jsxs)(t.tbody,{children:[(0,l.jsxs)(t.tr,{children:[(0,l.jsx)(t.td,{style:{textAlign:"left"},children:"Consensus"}),(0,l.jsx)(t.td,{style:{textAlign:"left"},children:"30333"}),(0,l.jsx)(t.td,{style:{textAlign:"left"},children:"Controller IP"}),(0,l.jsx)(t.td,{style:{textAlign:"left"},children:"30333"}),(0,l.jsx)(t.td,{style:{textAlign:"left"},children:"TCP"})]}),(0,l.jsxs)(t.tr,{children:[(0,l.jsx)(t.td,{style:{textAlign:"left"},children:"DSN"}),(0,l.jsx)(t.td,{style:{textAlign:"left"},children:"30433"}),(0,l.jsx)(t.td,{style:{textAlign:"left"},children:"Controller IP"}),(0,l.jsx)(t.td,{style:{textAlign:"left"},children:"30433"}),(0,l.jsx)(t.td,{style:{textAlign:"left"},children:"TCP"})]}),(0,l.jsxs)(t.tr,{children:[(0,l.jsx)(t.td,{style:{textAlign:"left"},children:"Cluster Controller"}),(0,l.jsx)(t.td,{style:{textAlign:"left"},children:"30533"}),(0,l.jsx)(t.td,{style:{textAlign:"left"},children:"Controller IP"}),(0,l.jsx)(t.td,{style:{textAlign:"left"},children:"30533"}),(0,l.jsx)(t.td,{style:{textAlign:"left"},children:"TCP"})]})]})]}),(0,l.jsx)(t.p,{children:(0,l.jsx)(t.strong,{children:"Do NOT forward:"})}),(0,l.jsxs)(t.ul,{children:["\n",(0,l.jsx)(t.li,{children:"Port 4222 (NATS) - internal cluster communication only"}),"\n",(0,l.jsx)(t.li,{children:"Port 9944 (RPC) - internal cluster communication only"}),"\n"]})]}),(0,l.jsx)(i.A,{value:"firewall",label:"Firewall Setup",children:(0,l.jsx)(t.pre,{children:(0,l.jsx)(t.code,{className:"language-bash",children:"# Linux (UFW)\n# Public ports\nsudo ufw allow 30333/tcp comment 'Cluster Consensus'\nsudo ufw allow 30433/tcp comment 'Cluster DSN'\nsudo ufw allow 30533/tcp comment 'Cluster Controller'\n\n# Internal cluster network (adjust subnet)\nsudo ufw allow from 192.168.1.0/24 to any port 4222 proto tcp comment 'NATS Internal'\nsudo ufw allow from 192.168.1.0/24 to any port 9944 proto tcp comment 'RPC Internal'\n\n# Windows PowerShell\nNew-NetFirewallRule -DisplayName \"Cluster Consensus\" `\n    -Direction Inbound -Protocol TCP -LocalPort 30333 -Action Allow\nNew-NetFirewallRule -DisplayName \"Cluster DSN\" `\n    -Direction Inbound -Protocol TCP -LocalPort 30433 -Action Allow\nNew-NetFirewallRule -DisplayName \"Cluster Controller\" `\n    -Direction Inbound -Protocol TCP -LocalPort 30533 -Action Allow\n\n# NATS internal\nNew-NetFirewallRule -DisplayName \"NATS Internal\" `\n    -Direction Inbound -Protocol TCP -LocalPort 4222 `\n    -RemoteAddress LocalSubnet -Action Allow\n"})})})]}),"\n",(0,l.jsx)(t.h3,{id:"step-2-farmer-machines-configuration",children:"Step 2: Farmer Machines Configuration"}),"\n",(0,l.jsx)(t.p,{children:"Farmer machines only need internal network access to communicate with the controller's NATS server:"}),"\n",(0,l.jsxs)(s.A,{children:[(0,l.jsx)(i.A,{value:"router-farmers",label:"Router Configuration",children:(0,l.jsxs)(t.p,{children:[(0,l.jsx)(t.strong,{children:"No port forwarding needed"})," for farmer machines. They only communicate internally with the controller."]})}),(0,l.jsx)(i.A,{value:"firewall-farmers",label:"Firewall Configuration",children:(0,l.jsx)(t.pre,{children:(0,l.jsx)(t.code,{className:"language-bash",children:"# On each farmer machine\n# Allow outbound NATS connection to controller\nsudo ufw allow out to CONTROLLER_IP port 4222 proto tcp comment 'NATS to Controller'\n\n# Windows\nNew-NetFirewallRule -DisplayName \"NATS to Controller\" `\n    -Direction Outbound -Protocol TCP `\n    -RemoteAddress CONTROLLER_IP -RemotePort 4222 -Action Allow\n"})})})]}),"\n",(0,l.jsx)(t.h3,{id:"step-3-internal-network-configuration",children:"Step 3: Internal Network Configuration"}),"\n",(0,l.jsx)(t.p,{children:"Set up the internal cluster network:"}),"\n",(0,l.jsx)(t.pre,{children:(0,l.jsx)(t.code,{className:"language-bash",children:"# 1. Assign static IPs or DHCP reservations\n# Controller:     192.168.1.10\n# Cache Server 1: 192.168.1.11\n# Cache Server 2: 192.168.1.12\n# Farmer 1:       192.168.1.21\n# Farmer 2:       192.168.1.22\n# etc.\n\n# 2. Ensure all machines can communicate\n# Test from each machine:\nping 192.168.1.10  # Controller\ntelnet 192.168.1.10 4222  # NATS server\ntelnet 192.168.1.10 9944  # Node RPC\n"})})]})}function f(e={}){const{wrapper:t}={...(0,o.R)(),...e.components};return t?(0,l.jsx)(t,{...e,children:(0,l.jsx)(m,{...e})}):m(e)}},72206:(e,t,n)=>{n.d(t,{A:()=>b});var r=n(96540),l=n(18215),o=n(80052),s=n(56347),i=n(35793),a=n(99025),c=n(4430),u=n(44148);function d(e){return r.Children.toArray(e).filter((e=>"\n"!==e)).map((e=>{if(!e||(0,r.isValidElement)(e)&&function(e){const{props:t}=e;return!!t&&"object"==typeof t&&"value"in t}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}function h(e){const{values:t,children:n}=e;return(0,r.useMemo)((()=>{const e=t??function(e){return d(e).map((e=>{let{props:{value:t,label:n,attributes:r,default:l}}=e;return{value:t,label:n,attributes:r,default:l}}))}(n);return function(e){const t=(0,c.XI)(e,((e,t)=>e.value===t.value));if(t.length>0)throw new Error(`Docusaurus error: Duplicate values "${t.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[t,n])}function x(e){let{value:t,tabValues:n}=e;return n.some((e=>e.value===t))}function m(e){let{queryString:t=!1,groupId:n}=e;const l=(0,s.W6)(),o=function(e){let{queryString:t=!1,groupId:n}=e;if("string"==typeof t)return t;if(!1===t)return null;if(!0===t&&!n)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return n??null}({queryString:t,groupId:n});return[(0,a.aZ)(o),(0,r.useCallback)((e=>{if(!o)return;const t=new URLSearchParams(l.location.search);t.set(o,e),l.replace({...l.location,search:t.toString()})}),[o,l])]}function f(e){const{defaultValue:t,queryString:n=!1,groupId:l}=e,o=h(e),[s,a]=(0,r.useState)((()=>function(e){let{defaultValue:t,tabValues:n}=e;if(0===n.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(t){if(!x({value:t,tabValues:n}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${t}" but none of its children has the corresponding value. Available values are: ${n.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return t}const r=n.find((e=>e.default))??n[0];if(!r)throw new Error("Unexpected error: 0 tabValues");return r.value}({defaultValue:t,tabValues:o}))),[c,d]=m({queryString:n,groupId:l}),[f,g]=function(e){let{groupId:t}=e;const n=function(e){return e?`docusaurus.tab.${e}`:null}(t),[l,o]=(0,u.Dv)(n);return[l,(0,r.useCallback)((e=>{n&&o.set(e)}),[n,o])]}({groupId:l}),p=(()=>{const e=c??f;return x({value:e,tabValues:o})?e:null})();(0,i.A)((()=>{p&&a(p)}),[p]);return{selectedValue:s,selectValue:(0,r.useCallback)((e=>{if(!x({value:e,tabValues:o}))throw new Error(`Can't select invalid tab value=${e}`);a(e),d(e),g(e)}),[d,g,o]),tabValues:o}}var g=n(75251);const p={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};var j=n(74848);function A(e){let{className:t,block:n,selectedValue:r,selectValue:s,tabValues:i}=e;const a=[],{blockElementScrollPositionUntilNextRender:c}=(0,o.a_)(),u=e=>{const t=e.currentTarget,n=a.indexOf(t),l=i[n].value;l!==r&&(c(t),s(l))},d=e=>{let t=null;switch(e.key){case"Enter":u(e);break;case"ArrowRight":{const n=a.indexOf(e.currentTarget)+1;t=a[n]??a[0];break}case"ArrowLeft":{const n=a.indexOf(e.currentTarget)-1;t=a[n]??a[a.length-1];break}}t?.focus()};return(0,j.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,l.A)("tabs",{"tabs--block":n},t),children:i.map((e=>{let{value:t,label:n,attributes:o}=e;return(0,j.jsx)("li",{role:"tab",tabIndex:r===t?0:-1,"aria-selected":r===t,ref:e=>{a.push(e)},onKeyDown:d,onClick:u,...o,className:(0,l.A)("tabs__item",p.tabItem,o?.className,{"tabs__item--active":r===t}),children:n??t},t)}))})}function C(e){let{lazy:t,children:n,selectedValue:o}=e;const s=(Array.isArray(n)?n:[n]).filter(Boolean);if(t){const e=s.find((e=>e.props.value===o));return e?(0,r.cloneElement)(e,{className:(0,l.A)("margin-top--md",e.props.className)}):null}return(0,j.jsx)("div",{className:"margin-top--md",children:s.map(((e,t)=>(0,r.cloneElement)(e,{key:t,hidden:e.props.value!==o})))})}function y(e){const t=f(e);return(0,j.jsxs)("div",{className:(0,l.A)("tabs-container",p.tabList),children:[(0,j.jsx)(A,{...t,...e}),(0,j.jsx)(C,{...t,...e})]})}function b(e){const t=(0,g.A)();return(0,j.jsx)(y,{...e,children:d(e.children)},String(t))}},82223:(e,t,n)=>{n.d(t,{A:()=>s});n(96540);var r=n(18215);const l={tabItem:"tabItem_Ymn6"};var o=n(74848);function s(e){let{children:t,hidden:n,className:s}=e;return(0,o.jsx)("div",{role:"tabpanel",className:(0,r.A)(l.tabItem,s),hidden:n,children:t})}}}]);