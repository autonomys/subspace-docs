# Documentation Update Notifications GitHub Action
#
# Overview:
# This GitHub Action is designed to send notifications via Discord whenever there's an update 
# in the download URLs for Pulsar and Advanced CLI. It specifically checks the .mdx files in the 
# 'version-latest' folder for any changes in the release tags.
# Note: We intentionally avoid checking the 'docs' folder as these are for pre-release documentation 
# and are not the focus of this notification system.
#
# How It Works:
# - The action triggers on a push to specific paths in the repository:
#   - 'versioned_docs/version-latest/protocol/pulsar.mdx'
#   - 'versioned_docs/version-latest/protocol/substrate-cli.mdx'
# - It compares the last two commits to find changes in the release tags within the URLs for Pulsar and Advanced CLI.
# - If a change is detected in the release tags:
#   - For Pulsar, it fetches the release notes from the Pulsar GitHub repository.
#   - For Advanced CLI, it fetches the release notes from the Subspace monorepo on GitHub.
# - Sends a Discord notification based on what has been updated:
#   - If only Pulsar is updated, a Pulsar-specific message is sent.
#   - If only Advanced CLI is updated, an Advanced CLI-specific message is sent.
#   - If both are updated, a combined message is sent.
#
# Edge Cases:
# - This action only checks for changes in the release tags, ignoring other types of changes in the documentation.
# - It triggers only for updates in the 'version-latest' directory, not for pre-releases.
#
# Requirements:
# - This action requires GitHub secrets to be set up for the GitHub Token and Discord Webhook.
#
# To Use:
# - Simply update the documentation with a new version and merge the pull request.
#
# ---------------------------------------------------------------------------

  name: Documentation Update Notifications

  # Triggers only when a PR is merged into the main branch
  on:
    pull_request:
      types:
        - closed
      branches:
        - main
      paths:
        - 'versioned_docs/version-latest/protocol/pulsar.mdx'
        - 'versioned_docs/version-latest/protocol/substrate-cli.mdx'
    workflow_dispatch:
      inputs:
        notify_community:
          description: "I understand that running this workflow will automatically notify the community."
          required: true
          type: boolean
    
  jobs:
    notify:
      # Only run the job if the PR is merged, not just closed
      if: github.event.pull_request.merged == true
      runs-on: ubuntu-latest
      steps:
        - name: Checkout code
          uses: actions/checkout@v2
          with:
            fetch-depth: 0
        
        - name: Get and Parse File Diffs for release Tags
          id: parse_diffs
          run: |
            # Get the parent commits of the merge commit.
            PARENT1=$(git rev-parse HEAD^1)
            PARENT2=$(git rev-parse HEAD^2)
  
            # Determine which parent commit is from main before the merge.
            if git merge-base --is-ancestor $PARENT1 HEAD; then
                MAIN_BEFORE_MERGE=$PARENT1
                PR_LAST_COMMIT=$PARENT2
            else
                MAIN_BEFORE_MERGE=$PARENT2
                PR_LAST_COMMIT=$PARENT1
            fi
            
            # Extract the differences for the relevant .mdx files
            git diff $MAIN_BEFORE_MERGE..$PR_LAST_COMMIT 'versioned_docs/version-latest/protocol/pulsar.mdx' > pulsar_diff.txt
            git diff $MAIN_BEFORE_MERGE..$PR_LAST_COMMIT 'versioned_docs/version-latest/protocol/substrate-cli.mdx' > substrate_cli_diff.txt
            
            # Initialize variables to hold the new and old version tags
            new_pulsar_tag=""
            old_pulsar_tag=""
            new_substrate_cli_tag=""
            old_substrate_cli_tag=""
        
            # Extract the new and old version tags for Pulsar
            new_pulsar_tag=$(grep -o "\\+.*https://github.com/subspace/pulsar/releases/download/[^/]\\+/[^/]\\+" pulsar_diff.txt | head -1 | awk -F'/' '{print $8}')
            old_pulsar_tag=$(grep -o "\\-.*https://github.com/subspace/pulsar/releases/download/[^/]\\+/[^/]\\+" pulsar_diff.txt | head -1 | awk -F'/' '{print $8}')
            if [ "$new_pulsar_tag" != "$old_pulsar_tag" ]; then
              echo "new_pulsar_tag=${new_pulsar_tag}" >> $GITHUB_ENV
            fi
        
            # Extract the new and old version tags for Advanced CLI
            new_substrate_cli_tag=$(grep -o "\\+.*https://github.com/subspace/subspace/releases/download/[^/]\\+/[^/]\\+" substrate_cli_diff.txt | head -1 | awk -F'/' '{print $8}')
            old_substrate_cli_tag=$(grep -o "\\-.*https://github.com/subspace/subspace/releases/download/[^/]\\+/[^/]\\+" substrate_cli_diff.txt | head -1 | awk -F'/' '{print $8}')
            if [ "$new_substrate_cli_tag" != "$old_substrate_cli_tag" ]; then
              echo "new_substrate_cli_tag=${new_substrate_cli_tag}" >> $GITHUB_ENV
            fi
  
        # Fetch commit SHA for Pulsar's release tag
        - name: Get Pulsar Commit SHA by Tag
          if: ${{ env.new_pulsar_tag }}
          id: get_pulsar_sha
          run: |
            commit_sha=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" "https://api.github.com/repos/subspace/pulsar/git/ref/tags/${{ env.new_pulsar_tag }}" | jq -r '.object.sha')
            echo "pulsar_commit_sha=$commit_sha" >> $GITHUB_ENV
  
        # Fetch release details for Pulsar using the obtained commit SHA
        - name: Get Pulsar Release Details
          if: ${{ env.new_pulsar_tag }}
          id: pulsar_release_info
          uses: cardinalby/git-get-release-action@v1
          env:
            GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          with:
            repo: subspace/pulsar
            commitSha: ${{ env.pulsar_commit_sha }}
            prerelease: false
  
        # Fetch commit SHA for Advanced CLI's release tag
        - name: Get Advanced CLI Commit SHA by Tag
          if: ${{ env.new_substrate_cli_tag }}
          id: get_advanced_cli_sha
          run: |
            commit_sha=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" "https://api.github.com/repos/subspace/subspace/git/ref/tags/${{ env.new_substrate_cli_tag }}" | jq -r '.object.sha')
            echo "advanced_cli_commit_sha=$commit_sha" >> $GITHUB_ENV
  
        # Fetch release details for Advanced CLI using the obtained commit SHA
        - name: Get Advanced CLI Release Details
          if: ${{ env.new_substrate_cli_tag }}
          id: advanced_cli_release_info
          uses: cardinalby/git-get-release-action@v1
          env:
            GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          with:
            repo: subspace/subspace
            commitSha: ${{ env.advanced_cli_commit_sha }}
            prerelease: false

        # Compile Embed Message Dynamically based on which releases were updated
        - name: Prepare Discord Embed Message
          id: prepare_embed
          run: |
            pulsar_release_notes="${{ steps.pulsar_release_info.outputs.body }}"
            advanced_cli_release_notes="${{ steps.advanced_cli_release_info.outputs.body }}"
            
            # Define Feedback Field
            feedback_field="{
              \"name\": \"Feedback\",
              \"value\": \"Encountered any issues? Let us know [here](https://github.com/subspace/documentation/issues).\",
              \"inline\": false
            }"
            
            # Case 1: Only Pulsar Release
            if [ "$new_pulsar_tag" ] && [ -z "$new_substrate_cli_tag" ]; then
              if [ ${#pulsar_release_notes} -gt 1024 ]; then
                pulsar_embed="{
                  \"name\": \"‚òÄÔ∏è Pulsar Version $new_pulsar_tag:\",
                  \"value\": \"View the latest [Pulsar Docs](https://docs.subspace.network/docs/protocol/pulsar) and [Release Notes](https://github.com/subspace/pulsar/releases/tag/$new_pulsar_tag)\",
                  \"inline\": false
                }"
              else
                pulsar_embed="{
                  \"name\": \"‚òÄÔ∏è Pulsar Version $new_pulsar_tag:\",
                  \"value\": \"View the latest [Pulsar Docs](https://docs.subspace.network/docs/protocol/pulsar) \\n\\nPulsar Release Notes:\\n```${pulsar_release_notes}```\",
                  \"inline\": false
                }"
              fi
              fields="[$pulsar_embed, $feedback_field]"
              
            # Case 2: Only Advanced CLI Release
            elif [ "$new_substrate_cli_tag" ] && [ -z "$new_pulsar_tag" ]; then
              if [ ${#advanced_cli_release_notes} -gt 1024 ]; then
                advanced_cli_embed="{
                  \"name\": \"üõ†Ô∏è Advanced CLI $new_substrate_cli_tag\",
                  \"value\": \"View the latest [Advanced CLI Docs](https://docs.subspace.network/docs/protocol/substrate-cli) and [Release Notes](https://github.com/subspace/subspace/releases/tag/$new_substrate_cli_tag)\",
                  \"inline\": false
                }"
              else
                advanced_cli_embed="{
                  \"name\": \"üõ†Ô∏è Advanced CLI $new_substrate_cli_tag\",
                  \"value\": \"View the latest [Advanced CLI Docs](https://docs.subspace.network/docs/protocol/substrate-cli) \\n\\nAdvanced CLI Release Notes:\\n```${advanced_cli_release_notes}```\",
                  \"inline\": false
                }"
              fi
              fields="[$advanced_cli_embed, $feedback_field]"
              
            # Case 3: Both Pulsar & Advanced CLI Release
            else
              # Handle Pulsar
              if [ ${#pulsar_release_notes} -gt 1024 ]; then
                pulsar_embed="{
                  \"name\": \"‚òÄÔ∏è Pulsar Version $new_pulsar_tag:\",
                  \"value\": \"View the latest [Pulsar Docs](https://docs.subspace.network/docs/protocol/pulsar) and [Release Notes](https://github.com/subspace/pulsar/releases/tag/$new_pulsar_tag)\",
                  \"inline\": false
                }"
              else
                pulsar_embed="{
                  \"name\": \"‚òÄÔ∏è Pulsar Version $new_pulsar_tag:\",
                  \"value\": \"View the latest [Pulsar Docs](https://docs.subspace.network/docs/protocol/pulsar) \\n\\nPulsar Release Notes:\\n```${pulsar_release_notes}```\",
                  \"inline\": false
                }"
              fi
              
              # Handle Advanced CLI
              if [ ${#advanced_cli_release_notes} -gt 1024 ]; then
                advanced_cli_embed="{
                  \"name\": \"üõ†Ô∏è Advanced CLI $new_substrate_cli_tag\",
                  \"value\": \"View the latest [Advanced CLI Docs](https://docs.subspace.network/docs/protocol/substrate-cli) and [Release Notes](https://github.com/subspace/subspace/releases/tag/$new_substrate_cli_tag)\",
                  \"inline\": false
                }"
              else
                advanced_cli_embed="{
                  \"name\": \"üõ†Ô∏è Advanced CLI $new_substrate_cli_tag\",
                  \"value\": \"View the latest [Advanced CLI Docs](https://docs.subspace.network/docs/protocol/substrate-cli) \\n\\nAdvanced CLI Release Notes:\\n```${advanced_cli_release_notes}```\",
                  \"inline\": false
                }"
              fi
              fields="[$pulsar_embed, $advanced_cli_embed, $feedback_field]"
            fi
            
            # Combine the fields for the final embed message
            final_embed="{
              \"embeds\": [
                {
                  \"title\": \":arrow_up: **New Version Available** :arrow_up:\",
                  \"description\": \"The latest documentation has updates.\",
                  \"color\": 4321431,
                  \"timestamp\": \"$(date --utc +%Y-%m-%dT%H:%M:%SZ)\",
                  \"fields\": $fields,
                  \"footer\": {
                    \"text\": \"This message is auto-generated from our Documentation GitHub repository.\"
                  }
                }
              ]
            }"
            
            # Set the final embed to an environment variable for the next step
            echo 'DISCORD_EMBEDS='"$(echo "$final_embed" | jq -c .)" >> $GITHUB_ENV
        
        # Sending the prepared embed
        - name: Send Discord Notification with Prepared Embed
          id: send-message
          env:
            DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK }}
            DISCORD_EMBEDS: ${{ env.DISCORD_EMBEDS }}
          uses: Ilshidur/action-discord@master
          with:
            args: '***Note:** This Notification was automatically sent via GitHub Actions*'
