name: Check for Version Updates and Create PR

on:
  schedule:
    - cron: '0 */3 * * *' # Trigger daily at midnight (adjust as needed)
  workflow_dispatch:
    inputs:
      notify_community:
        description: "I understand that running this workflow will attempt to automatically update the versions"
        required: true
        type: boolean
jobs:
  check-and-create-pr:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      # Capture the current version tags for Pulsar and Advanced CLI
      - name: Capture current version tags
        id: capture_versions
        run: |
          current_pulsar_tag=$(grep -o "https://github.com/subspace/pulsar/releases/download/[^/]\+/[^/]\+" 'versioned_docs/version-latest/protocol/pulsar.mdx' | head -1 | awk -F'/' '{print $8}')
          current_substrate_cli_tag=$(grep -o "https://github.com/subspace/subspace/releases/download/[^/]\+/[^/]\+" 'versioned_docs/version-latest/protocol/substrate-cli.mdx' | head -1 | awk -F'/' '{print $8}')
          echo "current_pulsar_tag=${current_pulsar_tag}" >> $GITHUB_ENV
          echo "current_substrate_cli_tag=${current_substrate_cli_tag}" >> $GITHUB_ENV

      # Fetch the latest release tags for Pulsar and Advanced CLI
      - name: Get latest Pulsar release
        id: pulsar_release
        run: |
          response=$(curl -s -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
            "https://api.github.com/repos/subspace/pulsar/releases/latest")
          echo "::set-output name=pulsar_tag::$(echo $response | jq -r '.tag_name')"

      - name: Get latest Advanced CLI release
        id: advanced_cli_release
        run: |
          response=$(curl -s -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
            "https://api.github.com/repos/subspace/subspace/releases/latest")
          echo "::set-output name=advanced_cli_tag::$(echo $response | jq -r '.tag_name')"

      # Compare the latest release tags with the current versions and update the documentation code
      - name: Update documentation code
        id: update-documentation-code
        run: |
          current_pulsar_tag=${{ env.current_pulsar_tag }}
          current_substrate_cli_tag=${{ env.current_substrate_cli_tag }}
          latest_pulsar_tag=${{ steps.pulsar_release.outputs.pulsar_tag }}
          latest_advanced_cli_tag=${{ steps.advanced_cli_release.outputs.advanced_cli_tag }}

          # Define arrays for allowlists and denylists for each repository, each variable can hold an array such as ("first_word" "second_word")
          pulsar_allowlist=("")
          pulsar_denylist=("")
          advanced_cli_allowlist=("gemini-")
          advanced_cli_denylist=("runtime" "snapshot")

          # Check if the latest release should be updated based on allowlists and denylists
          update_pulsar=false
          update_advanced_cli=false

          for white_word in "${pulsar_allowlist[@]}"; do
            if [[ $latest_pulsar_tag == *$white_word* ]]; then
              for black_word in "${pulsar_denylist[@]}"; do
                if [[ ! $latest_pulsar_tag == *$black_word* ]]; then
                  update_pulsar=true
                  break
                fi
              done
              break
            fi
          done

          for white_word in "${advanced_cli_allowlist[@]}"; do
            if [[ $latest_advanced_cli_tag == *$white_word* ]]; then
              for black_word in "${advanced_cli_denylist[@]}"; do
                if [[ ! $latest_advanced_cli_tag == *$black_word* ]]; then
                  update_advanced_cli=true
                  break
                fi
              done
              break
            fi
          done

          if [ "$update_pulsar" == "true" ]; then
            sed -i "s/$current_pulsar_tag/$latest_pulsar_tag/g" 'versioned_docs/version-latest/protocol/pulsar.mdx'
          fi

          if [ "$update_advanced_cli" == "true" ]; then
            sed -i "s/$current_substrate_cli_tag/$latest_advanced_cli_tag/g" 'versioned_docs/version-latest/protocol/substrate-cli.mdx'
          fi

      # Create a pull request if changes were made
      - name: Create Pull Request
        uses: peter-evans/create-pull-request@v3
        with:
          token: ${{ secrets.PAT }}
          branch: update-versions
          base: main
          title: 'Update version tags'
          body: 'This pull request updates version tags in the documentation.'
          commit-message: 'Update version tags'
