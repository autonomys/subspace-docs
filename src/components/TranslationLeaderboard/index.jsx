import React, { useEffect, useState } from 'react';
import useDocusaurusContext from '@docusaurus/useDocusaurusContext';
import './index.css'; 

const isDev = process.env.NODE_ENV === 'development';
const dummyDataAllTime = isDev ? require('./dummyLeaderboard.json') : null;
const dummyDataCurrentMonth = isDev ? require('./leaderboard-current-month.json') : null;
const dummyDataPreviousMonth = isDev ? require('./leaderboard-previous-month.json') : null;

const TranslationsLeaderboard = () => {
    const { siteConfig } = useDocusaurusContext();
    
    const [leaderboardData, setLeaderboardData] = useState([]);
    const [currentSelection, setCurrentSelection] = useState('allTime');
    const [metadata, setMetadata] = useState(null);

    useEffect(() => {
        const loadData = (filename, dummyFallback) => {
            if (isDev && dummyFallback) {
                // TODO: Remove backward compatibility after GitHub Actions runs with new format
                // Handle both old format (array) and new format (object with metadata)
                // Old format: [...user data...]
                // New format: { metadata: {...}, data: [...user data...] }
                if (Array.isArray(dummyFallback)) {
                    setLeaderboardData(dummyFallback);
                    setMetadata({ period: 'Development Data' });
                } else {
                    setLeaderboardData(dummyFallback.data || []);
                    setMetadata(dummyFallback.metadata || { period: 'Development Data' });
                }
            } else {
                import(`./${filename}`)
                    .then((module) => {
                        const data = module.default;
                        // TODO: Remove backward compatibility after GitHub Actions runs with new format
                        // Once all JSON files are regenerated by GitHub Actions with the new format,
                        // this Array.isArray check can be removed and we can assume data.metadata exists
                        if (Array.isArray(data)) {
                            // Old format - just an array (legacy support)
                            setLeaderboardData(data);
                            setMetadata({ period: 'Legacy Data' });
                        } else {
                            // New format - object with metadata and data
                            setLeaderboardData(data.data || []);
                            setMetadata(data.metadata || { period: 'Unknown Period' });
                        }
                    })
                    .catch((err) => console.error('Error loading leaderboard data:', err));
            }
        };

        let fileToLoad;
        let dummyFallback;
        
        switch(currentSelection) {
            case 'allTime':
                fileToLoad = 'leaderboard.json';
                dummyFallback = dummyDataAllTime;
                break;
            case 'currentMonth':
                fileToLoad = 'leaderboard-current-month.json';
                dummyFallback = dummyDataCurrentMonth;
                break;
            case 'previousMonth':
                fileToLoad = 'leaderboard-previous-month.json';
                dummyFallback = dummyDataPreviousMonth;
                break;
            default:
                fileToLoad = 'leaderboard.json';
                dummyFallback = dummyDataAllTime;
        }
        
        loadData(fileToLoad, dummyFallback);
    }, [currentSelection]);

    // Get the user's locale
    const locale = siteConfig.locale || navigator.language;

    // Function to format the word count according to the locale
    const formatWords = (wordsCount) => {
        const numericCount = Number(wordsCount);
        return numericCount.toLocaleString(locale);
    };

    // Function to format date range in user's locale
    const formatDateRange = (metadata) => {
        if (!metadata) return '';
        
        // If we have start and end dates, format them
        if (metadata.startDate && metadata.endDate) {
            try {
                const start = new Date(metadata.startDate);
                const end = new Date(metadata.endDate);
                
                const dateOptions = { 
                    day: 'numeric',
                    month: 'short',
                    year: 'numeric',
                    timeZone: 'UTC'
                };
                
                const startFormatted = start.toLocaleDateString(locale, dateOptions);
                const endFormatted = end.toLocaleDateString(locale, dateOptions);
                
                return `${startFormatted} - ${endFormatted}`;
            } catch (e) {
                // Fallback to period if date parsing fails
                return metadata.period || '';
            }
        }
        
        // Fallback to period
        return metadata.period || '';
    };

    // Filter users with Translated Words > 0
    const filteredLeaderboardData = leaderboardData.filter(user => Number(user["Translated (Words)"]) > 0);

    return (
        <div className="leaderboard-container">
            <div className="leaderboard-header">
                <div className="leaderboard-buttons">
                    <button 
                        onClick={() => setCurrentSelection('allTime')}
                        className={currentSelection === 'allTime' ? 'active' : ''}
                    >
                        All Time
                    </button>
                    <button 
                        onClick={() => setCurrentSelection('currentMonth')}
                        className={currentSelection === 'currentMonth' ? 'active' : ''}
                    >
                        Current Month
                    </button>
                    <button 
                        onClick={() => setCurrentSelection('previousMonth')}
                        className={currentSelection === 'previousMonth' ? 'active' : ''}
                    >
                        Previous Month
                    </button>
                </div>
                {metadata && <div className="date-range-display">{formatDateRange(metadata)}</div>}
            </div>
            {filteredLeaderboardData.map((user, index) => (
                <div key={index} className="user-card">
                    <div className="avatar-container">
                        <span className="ranking">
                            {index === 0 ? '🏆' : index === 1 ? '🥈' : index === 2 ? '🥉' : index + 1}
                        </span>
                        <img className="avatar" src={user.avatarUrl} alt={`${user.Name}'s avatar`} />
                        <div className="user-info">
                            <span className="username">{user.Name}</span>
                            <span className="languages">{user.Languages || 'N/A'}</span>
                        </div>
                    </div>
                    <span className="translated-words">
                        {formatWords(user["Translated (Words)"])} words
                    </span>
                </div>
            ))}
        </div>
    );
};

export default TranslationsLeaderboard;
